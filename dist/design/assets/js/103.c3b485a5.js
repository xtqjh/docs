(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{449:function(e,n,t){"use strict";t.r(n);var a=t(42),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"深入浅出外观模式-二"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深入浅出外观模式-二"}},[e._v("#")]),e._v(" 深入浅出外观模式（二）")]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("外观模式应用实例")])]),e._v(" "),t("p",[e._v("下面通过一个应用实例来进一步学习和理解外观模式。")]),e._v(" "),t("ol",[t("li",[e._v("实例说明")])]),e._v(" "),t("p",[e._v("某软件公司欲开发一个可应用于多个软件的文件加密模块，该模块可以对文件中的数据进行加密并将加密之后的数据存储在一个新文件中，具体的流程包括三个部分，分别是读取源文件、加密、保存加密之后的文件，其中，读取文件和保存文件使用流来实现，加密操作通过求模运算实现。这三个操作相对独立，为了实现代码的独立重用，让设计更符合单一职责原则，这三个操作的业务代码封装在三个不同的类中。")]),e._v(" "),t("p",[e._v("现使用外观模式设计该文件加密模块。")]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("实例类图")])]),e._v(" "),t("p",[e._v("通过分析，本实例结构图如图4所示。")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://img.my.csdn.net/uploads/201212/05/1354688525_6684.jpg",alt:""}})]),e._v(" "),t("p",[e._v("图4 文件加密模块结构图")]),e._v(" "),t("p",[e._v("在图4中，EncryptFacade充当外观类，FileReader、CipherMachine和FileWriter充当子系统类。")]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("实例代码")])]),e._v(" "),t("p",[e._v("(1) FileReader：文件读取类，充当子系统类。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//FileReader.cs  \nusing System;  \nusing System.Text;  \nusing System.IO;  \n  \nnamespace FacadeSample  \n{  \n    class FileReader  \n    {  \n        public string Read(string fileNameSrc)   \n        {  \n       Console.Write("读取文件，获取明文：");  \n            FileStream fs = null;  \n            StringBuilder sb = new StringBuilder();  \n       try  \n            {  \n                fs = new FileStream(fileNameSrc, FileMode.Open);  \n                int data;  \n               while((data = fs.ReadByte())!= -1)   \n                {  \n            sb = sb.Append((char)data);  \n               }  \n               fs.Close();  \n               Console.WriteLine(sb.ToString());  \n       }  \n       catch(FileNotFoundException e)   \n            {  \n           Console.WriteLine("文件不存在！");  \n       }  \n       catch(IOException e)   \n            {  \n           Console.WriteLine("文件操作错误！");  \n       }  \n       return sb.ToString();  \n        }  \n    }  \n}  \n')])])]),t("p",[e._v("(2) CipherMachine：数据加密类，充当子系统类。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//CipherMachine.cs  \nusing System;  \nusing System.Text;  \n  \nnamespace FacadeSample  \n{  \n    class CipherMachine  \n    {  \n       public string Encrypt(string plainText)   \n       {  \n       Console.Write("数据加密，将明文转换为密文：");  \n       string es = "";  \n            char[] chars = plainText.ToCharArray();  \n       foreach(char ch in chars)   \n            {  \n                string c = (ch % 7).ToString();  \n           es += c;  \n       }  \n            Console.WriteLine(es);  \n       return es;  \n    }  \n    }  \n}  \n')])])]),t("p",[e._v("(3) FileWriter：文件保存类，充当子系统类。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//FileWriter.cs  \nusing System;  \nusing System.IO;  \nusing System.Text;  \n  \nnamespace FacadeSample  \n{  \n    class FileWriter  \n    {  \n        public void Write(string encryptStr,string fileNameDes)   \n        {  \n       Console.WriteLine("保存密文，写入文件。");  \n            FileStream fs = null;  \n       try  \n            {  \n               fs = new FileStream(fileNameDes, FileMode.Create);  \n                byte[] str = Encoding.Default.GetBytes(encryptStr);  \n                fs.Write(str,0,str.Length);  \n                fs.Flush();  \n               fs.Close();  \n       }      \n       catch(FileNotFoundException e)   \n            {  \n        Console.WriteLine("文件不存在！");  \n       }  \n       catch(IOException e)   \n            {  \n                Console.WriteLine(e.Message);  \n           Console.WriteLine("文件操作错误！");  \n       }          \n        }  \n    }  \n}  \n')])])]),t("p",[e._v("(4) EncryptFacade：加密外观类，充当外观类。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// EncryptFacade.cs  \nnamespace FacadeSample  \n{  \n    class EncryptFacade  \n    {  \n        //维持对其他对象的引用  \n         private FileReader reader;  \n        private CipherMachine cipher;  \n        private FileWriter writer;  \n  \n        public EncryptFacade()  \n        {  \n            reader = new FileReader();  \n            cipher = new CipherMachine();  \n            writer = new FileWriter();  \n        }  \n  \n        //调用其他对象的业务方法  \n         public void FileEncrypt(string fileNameSrc, string fileNameDes)  \n        {  \n            string plainStr = reader.Read(fileNameSrc);  \n            string encryptStr = cipher.Encrypt(plainStr);  \n            writer.Write(encryptStr, fileNameDes);  \n        }  \n    }  \n}  \n")])])]),t("p",[e._v("(5) Program：客户端测试类")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//Program.cs  \nusing System;  \n  \nnamespace FacadeSample  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            EncryptFacade ef = new EncryptFacade();  \n            ef.FileEncrypt("src.txt", "des.txt");  \n            Console.Read();  \n        }  \n    }  \n}  \n')])])]),t("ol",{attrs:{start:"4"}},[t("li",[e._v("结果及分析")])]),e._v(" "),t("p",[e._v("编译并运行程序，输出结果如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("读取文件，获取明文：Hello world!\n数据加密，将明文转换为密文：233364062325\n保存密文，写入文件。\n")])])]),t("p",[e._v("在本实例中，对文件src.txt中的数据进行加密，该文件内容为“Hello world!”，加密之后将密文保存到另一个文件des.txt中，程序运行后保存在文件中的密文为“233364062325”。在加密类CipherMachine中，采用求模运算对明文进行加密，将明文中的每一个字符除以一个整数（本例中为7，可以由用户来进行设置）后取余数作为密文。")])])}),[],!1,null,null,null);n.default=r.exports}}]);