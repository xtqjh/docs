(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{402:function(n,e,t){"use strict";t.r(e);var a=t(42),l=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"对象间的联动-观察者模式-三"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象间的联动-观察者模式-三"}},[n._v("#")]),n._v(" 对象间的联动——观察者模式（三）")]),n._v(" "),t("p",[n._v("23.3 完整解决方案")]),n._v(" "),t("p",[n._v("为了实现对象之间的联动，Sunny软件公司开发人员决定使用观察者模式来进行多人联机对战游戏的设计，其基本结构如图22-4所示：")]),n._v(" "),t("p",[t("img",{attrs:{src:"http://my.csdn.net/uploads/201207/05/1341503929_8319.jpg",alt:""}})]),n._v(" "),t("p",[n._v("图22-4  多人联机对战游戏结构图\n在图22-4中，AllyControlCenter充当目标类，ConcreteAllyControlCenter充当具体目标类，Observer充当抽象观察者，Player充当具体观察者。完整代码如下所示：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('import java.util.*;  \n  \n//抽象观察类  \ninterface Observer {  \n    public String getName();  \n    public void setName(String name);  \n    public void help(); //声明支援盟友方法  \n    public void beAttacked(AllyControlCenter acc); //声明遭受攻击方法  \n}  \n  \n//战队成员类：具体观察者类  \nclass Player implements Observer {  \n    private String name;  \n  \n    public Player(String name) {  \n        this.name = name;  \n    }  \n      \n    public void setName(String name) {  \n        this.name = name;  \n    }  \n      \n    public String getName() {  \n        return this.name;  \n    }  \n      \n    //支援盟友方法的实现  \n    public void help() {  \n        System.out.println("坚持住，" + this.name + "来救你！");  \n    }  \n      \n    //遭受攻击方法的实现，当遭受攻击时将调用战队控制中心类的通知方法notifyObserver()来通知盟友  \n    public void beAttacked(AllyControlCenter acc) {  \n        System.out.println(this.name + "被攻击！");  \n        acc.notifyObserver(name);         \n    }  \n}  \n  \n//战队控制中心类：目标类  \nabstract class AllyControlCenter {  \n    protected String allyName; //战队名称  \n    protected ArrayList<Observer> players = new ArrayList<Observer>(); //定义一个集合用于存储战队成员  \n      \n    public void setAllyName(String allyName) {  \n        this.allyName = allyName;  \n    }  \n      \n    public String getAllyName() {  \n        return this.allyName;  \n    }  \n      \n    //注册方法  \n    public void join(Observer obs) {  \n        System.out.println(obs.getName() + "加入" + this.allyName + "战队！");  \n        players.add(obs);  \n    }  \n      \n    //注销方法  \n    public void quit(Observer obs) {  \n        System.out.println(obs.getName() + "退出" + this.allyName + "战队！");  \n        players.remove(obs);  \n    }  \n      \n    //声明抽象通知方法  \n    public abstract void notifyObserver(String name);  \n}  \n  \n//具体战队控制中心类：具体目标类  \nclass ConcreteAllyControlCenter extends AllyControlCenter {  \n    public ConcreteAllyControlCenter(String allyName) {  \n        System.out.println(allyName + "战队组建成功！");  \n        System.out.println("----------------------------");  \n        this.allyName = allyName;  \n    }  \n      \n    //实现通知方法  \n    public void notifyObserver(String name) {  \n        System.out.println(this.allyName + "战队紧急通知，盟友" + name + "遭受敌人攻击！");  \n        //遍历观察者集合，调用每一个盟友（自己除外）的支援方法  \n        for(Object obs : players) {  \n            if (!((Observer)obs).getName().equalsIgnoreCase(name)) {  \n                ((Observer)obs).help();  \n            }  \n        }         \n    }  \n}  \n')])])]),t("p",[n._v("编写如下客户端测试代码：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('class Client {  \n    public static void main(String args[]) {  \n        //定义观察目标对象  \nAllyControlCenter acc;  \n        acc = new ConcreteAllyControlCenter("金庸群侠");  \n          \n        //定义四个观察者对象  \n        Observer player1,player2,player3,player4;  \n          \n        player1 = new Player("杨过");  \n        acc.join(player1);  \n          \n        player2 = new Player("令狐冲");  \n        acc.join(player2);  \n          \n        player3 = new Player("张无忌");  \n        acc.join(player3);  \n          \n        player4 = new Player("段誉");  \n        acc.join(player4);  \n          \n        //某成员遭受攻击  \n        Player1.beAttacked(acc);  \n    }  \n}  \n')])])]),t("p",[n._v("编译并运行程序，输出结果如下：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("金庸群侠战队组建成功！\n----------------------------\n杨过加入金庸群侠战队！\n令狐冲加入金庸群侠战队！\n张无忌加入金庸群侠战队！\n段誉加入金庸群侠战队！\n杨过被攻击！\n金庸群侠战队紧急通知，盟友杨过遭受敌人攻击！\n坚持住，令狐冲来救你！\n坚持住，张无忌来救你！\n坚持住，段誉来救你！\n")])])]),t("p",[n._v("在本实例中，实现了两次对象之间的联动，当一个游戏玩家Player对象的beAttacked()方法被调用时，将调用AllyControlCenter的notifyObserver()方法来进行处理，而在notifyObserver()方法中又将调用其他Player对象的help()方法。Player的beAttacked()方法、AllyControlCenter的notifyObserver()方法以及Player的help()方法构成了一个联动触发链，执行顺序如下所示：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("Player.beAttacked() --\x3e AllyControlCenter.notifyObserver() --\x3ePlayer.help()。\n")])])])])}),[],!1,null,null,null);e.default=l.exports}}]);