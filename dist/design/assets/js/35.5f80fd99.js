(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{381:function(t,e,n){"use strict";n.r(e);var a=n(42),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"处理对象的多种状态及其相互转换-状态模式-五"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#处理对象的多种状态及其相互转换-状态模式-五"}},[t._v("#")]),t._v(" 处理对象的多种状态及其相互转换——状态模式（五）")]),t._v(" "),n("p",[t._v("5 使用环境类实现状态转换")]),t._v(" "),n("p",[t._v("在状态模式中实现状态转换时，具体状态类可通过调用环境类Context的setState()方法进行状态的转换操作，也可以统一由环境类Context来实现状态的转换。此时，增加新的具体状态类可能需要修改其他具体状态类或者环境类的源代码，否则系统无法转换到新增状态。但是对于客户端来说，无须关心状态类，可以为环境类设置默认的状态类，而将状态的转换工作交给具体状态类或环境类来完成，具体的转换细节对于客户端而言是透明的。")]),t._v(" "),n("p",[t._v("在上面的“银行账户状态转换”实例中，我们通过具体状态类来实现状态的转换，在每一个具体状态类中都包含一个stateCheck()方法，在该方法内部实现状态的转换，除此之外，我们还可以通过环境类来实现状态转换，环境类作为一个状态管理器，统一实现各种状态之间的转换操作。")]),t._v(" "),n("p",[t._v("下面通过一个包含循环状态的简单实例来说明如何使用环境类实现状态转换：")]),t._v(" "),n("p",[t._v("Sunny软件公司某开发人员欲开发一个屏幕放大镜工具，其具体功能描述如下：")]),t._v(" "),n("p",[t._v("用户单击“放大镜”按钮之后屏幕将放大一倍，再点击一次“放大镜”按钮屏幕再放大一倍，第三次点击该按钮后屏幕将还原到默认大小。")]),t._v(" "),n("p",[t._v("可以考虑使用状态模式来设计该屏幕放大镜工具，我们定义三个屏幕状态类NormalState、LargerState和LargestState来对应屏幕的三种状态，分别是正常状态、二倍放大状态和四倍放大状态，屏幕类Screen充当环境类，其结构如图6所示：")]),t._v(" "),n("p",[n("img",{attrs:{src:"http://img.my.csdn.net/uploads/201301/20/1358694582_7264.jpg",alt:""}})]),t._v(" "),n("p",[t._v("图6 屏幕放大镜工具结构图")]),t._v(" "),n("p",[t._v("本实例核心代码如下所示：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//屏幕类  \nclass Screen {  \n    //枚举所有的状态，currentState表示当前状态  \n    private State currentState, normalState, largerState, largestState;  \n  \n    public Screen() {  \n        this.normalState = new NormalState(); //创建正常状态对象  \n        this.largerState = new LargerState(); //创建二倍放大状态对象  \n        this.largestState = new LargestState(); //创建四倍放大状态对象  \n        this.currentState = normalState; //设置初始状态  \n        this.currentState.display();  \n    }  \n      \n    public void setState(State state) {  \n        this.currentState = state;  \n    }  \n      \n    //单击事件处理方法，封转了对状态类中业务方法的调用和状态的转换  \n    public void onClick() {  \n        if (this.currentState == normalState) {  \n            this.setState(largerState);  \n            this.currentState.display();  \n        }  \n        else if (this.currentState == largerState) {  \n            this.setState(largestState);  \n            this.currentState.display();  \n        }  \n        else if (this.currentState == largestState) {  \n            this.setState(normalState);  \n            this.currentState.display();  \n        }  \n    }  \n}  \n  \n//抽象状态类  \nabstract class State {  \n    public abstract void display();  \n}  \n  \n//正常状态类  \nclass NormalState extends State{  \n    public void display() {  \n        System.out.println("正常大小！");  \n    }  \n}  \n  \n//二倍状态类  \nclass LargerState extends State{  \n    public void display() {  \n        System.out.println("二倍大小！");  \n    }  \n}  \n  \n//四倍状态类  \nclass LargestState extends State{  \n    public void display() {  \n        System.out.println("四倍大小！");  \n    }  \n} \n')])])]),n("p",[t._v("在上述代码中，所有的状态转换操作都由环境类Screen来实现，此时，环境类充当了状态管理器角色。如果需要增加新的状态，例如“八倍状态类”，需要修改环境类，这在一定程度上违背了“开闭原则”，但对其他状态类没有任何影响。")]),t._v(" "),n("p",[t._v("编写如下客户端代码进行测试：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Client {  \n    public static void main(String args[]) {  \n        Screen screen = new Screen();  \n        screen.onClick();  \n        screen.onClick();  \n        screen.onClick();  \n    }  \n}  \n")])])]),n("p",[t._v("输出结果如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("正常大小！\n二倍大小！\n四倍大小！\n正常大小！\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);