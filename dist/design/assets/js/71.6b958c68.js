(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{417:function(t,a,n){"use strict";n.r(a);var e=n(42),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"工厂三兄弟之简单工厂模式-三"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工厂三兄弟之简单工厂模式-三"}},[t._v("#")]),t._v(" 工厂三兄弟之简单工厂模式（三）")]),t._v(" "),n("p",[t._v("3 完整解决方案")]),t._v(" "),n("p",[t._v("为了将Chart类的职责分离，同时将Chart对象的创建和使用分离，Sunny软件公司开发人员决定使用简单工厂模式对图表库进行重构，重构后的结构如图2所示：")]),t._v(" "),n("p",[n("img",{attrs:{src:"http://img.blog.csdn.net/20130711144554265?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTG92ZUxpb24=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",alt:""}})]),t._v(" "),n("p",[t._v("图2 图表库结构图")]),t._v(" "),n("p",[t._v("在图2中，Chart接口充当抽象产品类，其子类HistogramChart、PieChart和LineChart充当具体产品类，ChartFactory充当工厂类。完整代码如下所示：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//抽象图表接口：抽象产品类  \ninterface Chart {  \n    public void display();  \n}  \n  \n//柱状图类：具体产品类  \nclass HistogramChart implements Chart {  \n    public HistogramChart() {  \n        System.out.println("创建柱状图！");  \n    }  \n      \n    public void display() {  \n        System.out.println("显示柱状图！");  \n    }  \n}  \n  \n//饼状图类：具体产品类  \nclass PieChart implements Chart {  \n    public PieChart() {  \n        System.out.println("创建饼状图！");  \n    }  \n      \n    public void display() {  \n        System.out.println("显示饼状图！");  \n    }  \n}  \n  \n//折线图类：具体产品类  \nclass LineChart implements Chart {  \n    public LineChart() {  \n        System.out.println("创建折线图！");  \n    }  \n      \n    public void display() {  \n        System.out.println("显示折线图！");  \n    }  \n}  \n  \n//图表工厂类：工厂类  \nclass ChartFactory {  \n    //静态工厂方法  \n    public static Chart getChart(String type) {  \n        Chart chart = null;  \n        if (type.equalsIgnoreCase("histogram")) {  \n            chart = new HistogramChart();  \n            System.out.println("初始化设置柱状图！");  \n        }  \n        else if (type.equalsIgnoreCase("pie")) {  \n            chart = new PieChart();  \n            System.out.println("初始化设置饼状图！");  \n        }  \n        else if (type.equalsIgnoreCase("line")) {  \n            chart = new LineChart();  \n            System.out.println("初始化设置折线图！");              \n        }  \n        return chart;  \n    }  \n}  \n')])])]),n("p",[t._v("编写如下客户端测试代码：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('class Client {  \n    public static void main(String args[]) {  \n        Chart chart;  \n        chart = ChartFactory.getChart("histogram"); //通过静态工厂方法创建产品  \n        chart.display();  \n    }  \n} \n')])])]),n("p",[t._v("编译并运行程序，输出结果如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("创建柱状图！\n初始化设置柱状图！\n显示柱状图！\n")])])]),n("p",[t._v("在客户端测试类中，我们使用工厂类的静态工厂方法创建产品对象，如果需要更换产品，只需修改静态工厂方法中的参数即可，例如将柱状图改为饼状图，只需将代码：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('chart = ChartFactory.getChart("histogram");\n')])])]),n("p",[t._v("改为：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('chart = ChartFactory.getChart("pie");\n')])])]),n("p",[t._v("编译并运行程序，输出结果如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("创建饼状图！\n初始化设置饼状图！\n显示饼状图！\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);