(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{387:function(n,t,e){"use strict";e.r(t);var r=e(42),i=Object(r.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"复杂对象的组装与创建-建造者模式-二"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#复杂对象的组装与创建-建造者模式-二"}},[n._v("#")]),n._v(" 复杂对象的组装与创建——建造者模式（二）")]),n._v(" "),e("p",[n._v("8.3 完整解决方案")]),n._v(" "),e("p",[n._v("Sunny公司开发人员决定使用建造者模式来实现游戏角色的创建，其基本结构如图8-3所示：")]),n._v(" "),e("p",[e("img",{attrs:{src:"http://my.csdn.net/uploads/201204/04/1333541212_6038.gif",alt:""}})]),n._v(" "),e("p",[n._v("图8-3 游戏角色创建结构图")]),n._v(" "),e("p",[n._v("在图8-3中，ActorController充当指挥者，ActorBuilder充当抽象建造者，HeroBuilder、AngelBuilder和DevilBuilder充当具体建造者，Actor充当复杂产品。完整代码如下所示：\n//Actor角色类：复杂产品，考虑到代码的可读性，只列出部分成员属性，且成员属性的类型均为String，真实情况下，有些成员属性的类型需自定义")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('class Actor\n{\n       private  String type; //角色类型\n       private  String sex; //性别\n       private  String face; //脸型\n       private  String costume; //服装\n       private  String hairstyle; //发型\n      \n       public  void setType(String type) {\n              this.type  = type;\n       }\n       public  void setSex(String sex) {\n              this.sex  = sex;\n       }\n       public  void setFace(String face) {\n              this.face  = face;\n       }\n       public  void setCostume(String costume) {\n              this.costume  = costume;\n       }\n       public  void setHairstyle(String hairstyle) {\n              this.hairstyle  = hairstyle;\n       }\n       public  String getType() {\n              return  (this.type);\n       }\n       public  String getSex() {\n              return  (this.sex);\n       }\n       public  String getFace() {\n              return  (this.face);\n       }\n       public  String getCostume() {\n              return  (this.costume);\n       }\n       public  String getHairstyle() {\n              return  (this.hairstyle);\n       }\n}\n\n//角色建造器：抽象建造者\nabstract class ActorBuilder\n{\n       protected  Actor actor = new Actor();\n      \n       public  abstract void buildType();\n       public  abstract void buildSex();\n       public  abstract void buildFace();\n       public  abstract void buildCostume();\n       public  abstract void buildHairstyle();\n \n    //工厂方法，返回一个完整的游戏角色对象\n       public Actor createActor()\n       {\n              return actor;\n       }\n}\n \n//英雄角色建造器：具体建造者\nclass HeroBuilder extends ActorBuilder\n{\n       public  void buildType()\n       {\n              actor.setType("英雄");\n       }\n       public  void buildSex()\n       {\n              actor.setSex("男");\n       }\n       public  void buildFace()\n       {\n              actor.setFace("英俊");\n       }\n       public  void buildCostume()\n       {\n              actor.setCostume("盔甲");\n       }\n       public  void buildHairstyle()\n       {\n              actor.setHairstyle("飘逸");\n       }    \n}\n \n//天使角色建造器：具体建造者\nclass AngelBuilder extends ActorBuilder\n{\n       public  void buildType()\n       {\n              actor.setType("天使");\n       }\n       public  void buildSex()\n       {\n              actor.setSex("女");\n       }\n       public  void buildFace()\n       {\n              actor.setFace("漂亮");\n       }\n       public  void buildCostume()\n       {\n              actor.setCostume("白裙");\n       }\n       public  void buildHairstyle()\n       {\n              actor.setHairstyle("披肩长发");\n       }    \n}\n \n//恶魔角色建造器：具体建造者\nclass DevilBuilder extends ActorBuilder\n{\n       public  void buildType()\n       {\n              actor.setType("恶魔");\n       }\n       public  void buildSex()\n       {\n              actor.setSex("妖");\n       }\n       public  void buildFace()\n       {\n              actor.setFace("丑陋");\n       }\n       public  void buildCostume()\n       {\n              actor.setCostume("黑衣");\n       }\n       public  void buildHairstyle()\n       {\n              actor.setHairstyle("光头");\n       }    \n}\n\n')])])]),e("p",[n._v("指挥者类ActorController定义了construct()方法，该方法拥有一个抽象建造者ActorBuilder类型的参数，在该方法内部实现了游戏角色对象的逐步构建，代码如下所示：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("//游戏角色创建控制器：指挥者\nclass ActorController\n{\n    //逐步构建复杂产品对象\n       public Actor construct(ActorBuilder ab)\n       {\n              Actor actor;\n              ab.buildType();\n              ab.buildSex();\n              ab.buildFace();\n              ab.buildCostume();\n              ab.buildHairstyle();\n              actor=ab.createActor();\n              return actor;\n       }\n}\n")])])]),e("p",[n._v("为了提高系统的灵活性和可扩展性，我们将具体建造者类的类名存储在配置文件中，并通过工具类XMLUtil来读取配置文件并反射生成对象，XMLUtil类的代码如下所示：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('import javax.xml.parsers.*;\nimport org.w3c.dom.*;\nimport org.xml.sax.SAXException;\nimport java.io.*;\nclass XMLUtil\n{\n//该方法用于从XML配置文件中提取具体类类名，并返回一个实例对象\n       public  static Object getBean()\n       {\n              try\n              {\n                     //创建文档对象\n                     DocumentBuilderFactory  dFactory = DocumentBuilderFactory.newInstance();\n                     DocumentBuilder  builder = dFactory.newDocumentBuilder();\n                     Document  doc;                                                \n                     doc  = builder.parse(new File("config.xml"));\n             \n                     //获取包含类名的文本节点\n                     NodeList  nl = doc.getElementsByTagName("className");\n            Node  classNode=nl.item(0).getFirstChild();\n            String  cName=classNode.getNodeValue();\n           \n            //通过类名生成实例对象并将其返回\n            Class c=Class.forName(cName);\n                 Object obj=c.newInstance();\n            return obj;\n         }  \n         catch(Exception e)\n         {\n              e.printStackTrace();\n              return null;\n          }\n       }\n}\n')])])]),e("p",[n._v("配置文件config.xml中存储了具体建造者类的类名，代码如下所示：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<?xml version="1.0"?>\n<config>\n       <className>AngelBuilder</className>\n</config>   \n        编写如下客户端测试代码：\nclass Client\n{\n       public  static void main(String args[])\n       {\n              ActorBuilder ab; //针对抽象建造者编程\n              ab =  (ActorBuilder)XMLUtil.getBean(); //反射生成具体建造者对象\n \n         ActorController ac = new  ActorController();\n              Actor actor;\n              actor = ac.construct(ab); //通过指挥者创建完整的建造者对象\n \n              String  type = actor.getType();\n              System.out.println(type  + "的外观：");\n              System.out.println("性别：" + actor.getSex());\n              System.out.println("面容：" + actor.getFace());\n              System.out.println("服装：" + actor.getCostume());\n              System.out.println("发型：" + actor.getHairstyle());\n       }\n}\n')])])]),e("p",[n._v("编译并运行程序，输出结果如下：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("天使的外观：\n性别：女\n面容：漂亮\n服装：白裙\n发型：披肩长发\n")])])]),e("p",[n._v("在建造者模式中，客户端只需实例化指挥者类，指挥者类针对抽象建造者编程，客户端根据需要传入具体的建造者类型，指挥者将指导具体建造者一步一步构造一个完整的产品（逐步调用具体建造者的buildX()方法），相同的构造过程可以创建完全不同的产品。在游戏角色实例中，如果需要更换角色，只需要修改配置文件，更换具体角色建造者类即可；如果需要增加新角色，可以增加一个新的具体角色建造者类作为抽象角色建造者的子类，再修改配置文件即可，原有代码无须修改，完全符合“开闭原则”。")])])}),[],!1,null,null,null);t.default=i.exports}}]);