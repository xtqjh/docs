(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{477:function(t,e,v){"use strict";v.r(e);var a=v(42),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"设计模式之代理模式-一"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计模式之代理模式-一"}},[t._v("#")]),t._v(" 设计模式之代理模式（一）")]),t._v(" "),v("p",[t._v("代理模式是常用的结构型设计模式之一，当无法直接访问某个对象或访问某个对象存在困难时可以通过一个代理对象来间接访问，为了保证客户端使用的透明性，所访问的真实对象与代理对象需要实现相同的接口。根据代理模式的使用目的不同，代理模式又可以分为多种类型，例如保护代理、远程代理、虚拟代理、缓冲代理等，它们应用于不同的场合，满足用户的不同需求。")]),t._v(" "),v("p",[t._v("15.1 代理模式概述")]),t._v(" "),v("p",[t._v("近年来，代购已逐步成为电子商务的一个重要分支。何谓代购，简单来说就是找人帮忙购买所需要的商品，当然你可能需要向实施代购的人支付一定的费用。代购通常分为两种类型：一种是因为在当地买不到某件商品，又或者是因为当地这件商品的价格比其他地区的贵，因此托人在其他地区甚至国外购买该商品，然后通过快递发货或者直接携带回来；还有一种代购，由于消费者对想要购买的商品相关信息的缺乏，自已无法确定其实际价值而又不想被商家宰，只好委托中介机构帮其讲价或为其代买。代购网站为此应运而生，它为消费者提供在线的代购服务，如果看中某国外购物网站上的商品，可以登录代购网站填写代购单并付款，代购网站会帮助进行购买然后通过快递公司将商品发送给消费者。商品代购过程如图15-1所示：")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://img.my.csdn.net/uploads/201211/26/1353942370_4572.jpg",alt:""}})]),t._v(" "),v("p",[t._v("图15-1 商品代购示意图")]),t._v(" "),v("p",[t._v("在软件开发中，也有一种设计模式可以提供与代购网站类似的功能。由于某些原因，客户端不想或不能直接访问一个对象，此时可以通过一个称之为“代理”的第三者来实现间接访问，该方案对应的设计模式被称为代理模式。")]),t._v(" "),v("p",[t._v("代理模式是一种应用很广泛的结构型设计模式，而且变化形式非常多，常见的代理形式包括远程代理、保护代理、虚拟代理、缓冲代理、智能引用代理等，后面将学习这些不同的代理形式。")]),t._v(" "),v("p",[t._v("代理模式定义如下：")]),t._v(" "),v("p",[t._v("代理模式：给某一个对象提供一个代理或占位符，并由代理对象来控制对原对象的访问。\nProxy Pattern: Provide a surrogate or placeholder for another object to control access to it.")]),t._v(" "),v("p",[t._v("代理模式是一种对象结构型模式。在代理模式中引入了一个新的代理对象，代理对象在客户端对象和目标对象之间起到中介的作用，它去掉客户不能看到的内容和服务或者增添客户需要的额外的新服务。")]),t._v(" "),v("p",[t._v("15.2 代理模式结构与实现")]),t._v(" "),v("p",[t._v("15.2.1 模式结构")]),t._v(" "),v("p",[t._v("代理模式的结构比较简单，其核心是代理类，为了让客户端能够一致性地对待真实对象和代理对象，在代理模式中引入了抽象层，代理模式结构如图15-2所示：")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://img.my.csdn.net/uploads/201211/26/1353942400_6301.jpg",alt:""}})]),t._v(" "),v("p",[t._v("图15-2 代理模式结构图")]),t._v(" "),v("p",[t._v("由图15-2可知，代理模式包含如下三个角色：")]),t._v(" "),v("p",[t._v("(1) Subject（抽象主题角色）：它声明了真实主题和代理主题的共同接口，这样一来在任何使用真实主题的地方都可以使用代理主题，客户端通常需要针对抽象主题角色进行编程。")]),t._v(" "),v("p",[t._v("(2) Proxy（代理主题角色）：它包含了对真实主题的引用，从而可以在任何时候操作真实主题对象；在代理主题角色中提供一个与真实主题角色相同的接口，以便在任何时候都可以替代真实主题；代理主题角色还可以控制对真实主题的使用，负责在需要的时候创建和删除真实主题对象，并对真实主题对象的使用加以约束。通常，在代理主题角色中，客户端在调用所引用的真实主题操作之前或之后还需要执行其他操作，而不仅仅是单纯调用真实主题对象中的操作。")]),t._v(" "),v("p",[t._v("(3) RealSubject（真实主题角色）：它定义了代理角色所代表的真实对象，在真实主题角色中实现了真实的业务操作，客户端可以通过代理主题角色间接调用真实主题角色中定义的操作。")]),t._v(" "),v("p",[t._v("15.2.2 模式实现")]),t._v(" "),v("p",[t._v("代理模式的结构图比较简单，但是在真实的使用和实现过程中要复杂很多，特别是代理类的设计和实现。")]),t._v(" "),v("p",[t._v("抽象主题类声明了真实主题类和代理类的公共方法，它可以是接口、抽象类或具体类，客户端针对抽象主题类编程，一致性地对待真实主题和代理主题，典型的抽象主题类代码如下：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("abstract class Subject  \n{  \n    public abstract void Request();  \n}  \n")])])]),v("p",[t._v("真实主题类继承了抽象主题类，提供了业务方法的具体实现，其典型代码如下：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("class RealSubject : Subject  \n{  \n    public override void Request()  \n    {  \n        //业务方法具体实现代码  \n    }  \n}  \n")])])]),v("p",[t._v("代理类也是抽象主题类的子类，它维持一个对真实主题对象的引用，调用在真实主题中实现的业务方法，在调用时可以在原有业务方法的基础上附加一些新的方法来对功能进行扩充或约束，最简单的代理类实现代码如下：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("class Proxy : Subject  \n{  \n    private RealSubject realSubject = new RealSubject(); //维持一个对真实主题对象的引用  \n  \n    public void PreRequest()   \n    {  \n        …...  \n    }  \n  \n    public override void Request()   \n    {  \n        PreRequest();  \n        realSubject.Request(); //调用真实主题对象的方法  \n         PostRequest();  \n    }  \n  \n    public void PostRequest()   \n    {  \n        ……  \n    }  \n}  \n")])])]),v("p",[t._v("在实际开发过程中，代理类的实现比上述代码要复杂很多，代理模式根据其目的和实现方式不同可分为很多种类，其中常用的几种代理模式简要说明如下：")]),t._v(" "),v("p",[t._v("(1) 远程代理(Remote Proxy)：为一个位于不同的地址空间的对象提供一个本地的代理对象，这个不同的地址空间可以是在同一台主机中，也可是在另一台主机中，远程代理又称为大使(Ambassador)。")]),t._v(" "),v("p",[t._v("(2) 虚拟代理(Virtual Proxy)：如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建。")]),t._v(" "),v("p",[t._v("(3) 保护代理(Protect Proxy)：控制对一个对象的访问，可以给不同的用户提供不同级别的使用权限。")]),t._v(" "),v("p",[t._v("(4) 缓冲代理(Cache Proxy)：为某一个目标操作的结果提供临时的存储空间，以便多个客户端可以共享这些结果。")]),t._v(" "),v("p",[t._v("(5) 智能引用代理(Smart Reference Proxy)：当一个对象被引用时，提供一些额外的操作，例如将对象被调用的次数记录下来等。")]),t._v(" "),v("p",[t._v("在这些常用的代理模式中，有些代理类的设计非常复杂，例如远程代理类，它封装了底层网络通信和对远程对象的调用，其实现较为复杂。")])])}),[],!1,null,null,null);e.default=s.exports}}]);