(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{437:function(e,n,i){"use strict";i.r(n);var t=i(42),l=Object(t.a)({},(function(){var e=this,n=e.$createElement,i=e._self._c||n;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"树形结构的处理-组合模式-一"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#树形结构的处理-组合模式-一"}},[e._v("#")]),e._v(" 树形结构的处理——组合模式（一）")]),e._v(" "),i("p",[e._v("树形结构在软件中随处可见，例如操作系统中的目录结构、应用软件中的菜单、办公系统中的公司组织结构等等，如何运用面向对象的方式来处理这种树形结构是组合模式需要解决的问题，组合模式通过一种巧妙的设计方案使得用户可以一致性地处理整个树形结构或者树形结构的一部分，也可以一致性地处理树形结构中的叶子节点（不包含子节点的节点）和容器节点（包含子节点的节点）。下面将学习这种用于处理树形结构的组合模式。")]),e._v(" "),i("p",[e._v("11.1 设计杀毒软件的框架结构")]),e._v(" "),i("p",[e._v("Sunny软件公司欲开发一个杀毒(AntiVirus)软件，该软件既可以对某个文件夹(Folder)杀毒，也可以对某个指定的文件(File)进行杀毒。该杀毒软件还可以根据各类文件的特点，为不同类型的文件提供不同的杀毒方式，例如图像文件(ImageFile)和文本文件(TextFile)的杀毒方式就有所差异。现需要提供该杀毒软件的整体框架设计方案。")]),e._v(" "),i("p",[e._v("在介绍Sunny公司开发人员提出的初始解决方案之前，我们先来分析一下操作系统中的文件目录结构，例如在Windows操作系统中，存在如图11-1所示目录结构：")]),e._v(" "),i("p",[i("img",{attrs:{src:"http://img.my.csdn.net/uploads/201209/07/1347029262_9910.jpg",alt:""}})]),e._v(" "),i("p",[e._v("图11-1 Windows目录结构")]),e._v(" "),i("p",[e._v("图11-1可以简化为如图11-2所示树形目录结构：")]),e._v(" "),i("p",[i("img",{attrs:{src:"http://img.my.csdn.net/uploads/201209/07/1347032636_4355.jpg",alt:""}})]),e._v(" "),i("p",[e._v("图11-2 树形目录结构示意图")]),e._v(" "),i("p",[e._v("我们可以看出，在图11-2中包含文件（灰色节点）和文件夹（白色节点）两类不同的元素，其中在文件夹中可以包含文件，还可以继续包含子文件夹，但是在文件中不能再包含子文件或者子文件夹。在此，我们可以称文件夹为容器(Container)，而不同类型的各种文件是其成员，也称为叶子(Leaf)，一个文件夹也可以作为另一个更大的文件夹的成员。如果我们现在要对某一个文件夹进行操作，如查找文件，那么需要对指定的文件夹进行遍历，如果存在子文件夹则打开其子文件夹继续遍历，如果是文件则判断之后返回查找结果。")]),e._v(" "),i("p",[e._v("Sunny软件公司的开发人员通过分析，决定使用面向对象的方式来实现对文件和文件夹的操作，定义了如下图像文件类ImageFile、文本文件类TextFile和文件夹类Folder：")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v('//为了突出核心框架代码，我们对杀毒过程的实现进行了大量简化 \nimport java.util.*; \n\n//图像文件类 \nclass ImageFile { \nprivate String name; \n\npublic ImageFile(String name) { \nthis.name = name; \n} \n\npublic void killVirus() { \n//简化代码，模拟杀毒 \nSystem.out.println("----对图像文件\'" + name + "\'进行杀毒"); \n} \n} \n\n//文本文件类 \nclass TextFile { \nprivate String name; \n\npublic TextFile(String name) { \nthis.name = name; \n} \n\npublic void killVirus() { \n//简化代码，模拟杀毒 \nSystem.out.println("----对文本文件\'" + name + "\'进行杀毒"); \n} \n} \n\n//文件夹类 \nclass Folder { \nprivate String name; \n//定义集合folderList，用于存储Folder类型的成员 \nprivate ArrayList<Folder> folderList = new ArrayList<Folder>(); \n//定义集合imageList，用于存储ImageFile类型的成员 \nprivate ArrayList<ImageFile> imageList = new ArrayList<ImageFile>(); \n//定义集合textList，用于存储TextFile类型的成员 \nprivate ArrayList<TextFile> textList = new ArrayList<TextFile>(); \n\npublic Folder(String name) { \nthis.name = name; \n} \n\n//增加新的Folder类型的成员 \npublic void addFolder(Folder f) { \nfolderList.add(f); \n} \n\n//增加新的ImageFile类型的成员 \npublic void addImageFile(ImageFile image) { \nimageList.add(image); \n} \n\n//增加新的TextFile类型的成员 \npublic void addTextFile(TextFile text) { \ntextList.add(text); \n} \n\n//需提供三个不同的方法removeFolder()、removeImageFile()和removeTextFile()来删除成员，代码省略 \n\n//需提供三个不同的方法getChildFolder(int i)、getChildImageFile(int i)和getChildTextFile(int i)来获取成员，代码省略 \n\npublic void killVirus() { \nSystem.out.println("****对文件夹\'" + name + "\'进行杀毒"); //模拟杀毒 \n\n//如果是Folder类型的成员，递归调用Folder的killVirus()方法 \nfor(Object obj : folderList) { \n((Folder)obj).killVirus(); \n} \n\n//如果是ImageFile类型的成员，调用ImageFile的killVirus()方法 \nfor(Object obj : imageList) { \n((ImageFile)obj).killVirus(); \n} \n\n//如果是TextFile类型的成员，调用TextFile的killVirus()方法 \nfor(Object obj : textList) { \n((TextFile)obj).killVirus(); \n} \n} \n} \n')])])]),i("p",[e._v("编写如下客户端测试代码进行测试：")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v('class Client { \npublic static void main(String args[]) { \nFolder folder1,folder2,folder3; \nfolder1 = new Folder("Sunny的资料"); \nfolder2 = new Folder("图像文件"); \nfolder3 = new Folder("文本文件"); \n\nImageFile image1,image2; \nimage1 = new ImageFile("小龙女.jpg"); \nimage2 = new ImageFile("张无忌.gif"); \n\nTextFile text1,text2; \ntext1 = new TextFile("九阴真经.txt"); \ntext2 = new TextFile("葵花宝典.doc"); \n\nfolder2.addImageFile(image1); \nfolder2.addImageFile(image2); \nfolder3.addTextFile(text1); \nfolder3.addTextFile(text2); \nfolder1.addFolder(folder2); \nfolder1.addFolder(folder3); \n\nfolder1.killVirus(); \n} \n} \n')])])]),i("p",[e._v("编译并运行程序，输出结果如下：")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v("****对文件夹'Sunny的资料'进行杀毒\n****对文件夹'图像文件'进行杀毒\n----对图像文件'小龙女.jpg'进行杀毒\n----对图像文件'张无忌.gif'进行杀毒\n****对文件夹'文本文件'进行杀毒\n----对文本文件'九阴真经.txt'进行杀毒\n----对文本文件'葵花宝典.doc'进行杀毒\n")])])]),i("p",[e._v("Sunny公司开发人员“成功”实现了杀毒软件的框架设计，但通过仔细分析，发现该设计方案存在如下问题：")]),e._v(" "),i("p",[e._v("(1) 文件夹类Folder的设计和实现都非常复杂，需要定义多个集合存储不同类型的成员，而且需要针对不同的成员提供增加、删除和获取等管理和访问成员的方法，存在大量的冗余代码，系统维护较为困难；")]),e._v(" "),i("p",[e._v("(2) 由于系统没有提供抽象层，客户端代码必须有区别地对待充当容器的文件夹Folder和充当叶子的ImageFile和TextFile，无法统一对它们进行处理；")]),e._v(" "),i("p",[e._v("(3) 系统的灵活性和可扩展性差，如果需要增加新的类型的叶子和容器都需要对原有代码进行修改，例如如果需要在系统中增加一种新类型的视频文件VideoFile，则必须修改Folder类的源代码，否则无法在文件夹中添加视频文件。")]),e._v(" "),i("p",[e._v("面对以上问题，Sunny软件公司的开发人员该如何来解决？这就需要用到本章将要介绍的组合模式，组合模式为处理树形结构提供了一种较为完美的解决方案，它描述了如何将容器和叶子进行递归组合，使得用户在使用时无须对它们进行区分，可以一致地对待容器和叶子。")])])}),[],!1,null,null,null);n.default=l.exports}}]);