(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{431:function(e,n,s){"use strict";s.r(n);var t=s(42),a=Object(t.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"撤销功能的实现-备忘录模式-四"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#撤销功能的实现-备忘录模式-四"}},[e._v("#")]),e._v(" 撤销功能的实现——备忘录模式（四）")]),e._v(" "),s("p",[e._v("21.4 实现多次撤销")]),e._v(" "),s("p",[e._v("Sunny软件公司开发人员通过使用备忘录模式实现了中国象棋棋子的撤销操作，但是使用上述代码只能实现一次撤销，因为在负责人类中只定义一个备忘录对象来保存状态，后面保存的状态会将前一次保存的状态覆盖，但有时候用户需要撤销多步操作。如何实现多次撤销呢？本节将提供一种多次撤销的解决方案，那就是在负责人类中定义一个集合来存储多个备忘录，每个备忘录负责保存一个历史状态，在撤销时可以对备忘录集合进行逆向遍历，回到一个指定的历史状态，而且还可以对备忘录集合进行正向遍历，实现重做(Redo)操作，即取消撤销，让对象状态得到恢复。")]),e._v(" "),s("p",[e._v("改进之后的中国象棋棋子撤销功能结构图如图21-5所示：")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://my.csdn.net/uploads/201205/02/1335892489_9232.jpg",alt:""}})]),e._v(" "),s("p",[e._v("在图21-5中，我们对负责人类MementoCaretaker进行了修改，在其中定义了一个ArrayList类型的集合对象来存储多个备忘录，其代码如下所示：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import java.util.*;  \n  \nclass MementoCaretaker {  \n    //定义一个集合来存储多个备忘录  \n    private ArrayList mementolist = new ArrayList();  \n  \n    public ChessmanMemento getMemento(int i) {  \n        return (ChessmanMemento)mementolist.get(i);  \n    }  \n  \n    public void setMemento(ChessmanMemento memento) {  \n        mementolist.add(memento);  \n    }  \n}  \n")])])]),s("p",[e._v("编写如下客户端测试代码：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('class Client {  \nprivate static int index = -1; //定义一个索引来记录当前状态所在位置  \n    private static MementoCaretaker mc = new MementoCaretaker();  \n  \n    public static void main(String args[]) {  \n        Chessman chess = new Chessman("车",1,1);  \n        play(chess);          \n        chess.setY(4);  \n        play(chess);  \n        chess.setX(5);  \n        play(chess);      \n        undo(chess,index);  \n        undo(chess,index);    \n        redo(chess,index);  \n        redo(chess,index);  \n    }  \n      \n    //下棋  \n    public static void play(Chessman chess) {  \n        mc.setMemento(chess.save()); //保存备忘录  \n        index ++;   \n        System.out.println("棋子" + chess.getLabel() + "当前位置为：" + "第" + chess.getX() + "行" + "第" + chess.getY() + "列。");  \n    }  \n  \n    //悔棋  \n    public static void undo(Chessman chess,int i) {  \n        System.out.println("******悔棋******");  \n        index --;   \n        chess.restore(mc.getMemento(i-1)); //撤销到上一个备忘录  \n        System.out.println("棋子" + chess.getLabel() + "当前位置为：" + "第" + chess.getX() + "行" + "第" + chess.getY() + "列。");  \n    }  \n  \n    //撤销悔棋  \n    public static void redo(Chessman chess,int i) {  \n        System.out.println("******撤销悔棋******");   \n        index ++;   \n        chess.restore(mc.getMemento(i+1)); //恢复到下一个备忘录  \n        System.out.println("棋子" + chess.getLabel() + "当前位置为：" + "第" + chess.getX() + "行" + "第" + chess.getY() + "列。");  \n    }  \n}   \n')])])]),s("p",[e._v("编译并运行程序，输出结果如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("棋子车当前位置为：第1行第1列。\n棋子车当前位置为：第1行第4列。\n棋子车当前位置为：第5行第4列。\n******悔棋******\n棋子车当前位置为：第1行第4列。\n******悔棋******\n棋子车当前位置为：第1行第1列。\n******撤销悔棋******\n棋子车当前位置为：第1行第4列。\n******撤销悔棋******\n棋子车当前位置为：第5行第4列。\n")])])]),s("p",[e._v("扩展")]),e._v(" "),s("blockquote",[s("p",[e._v("本实例只能实现最简单的Undo和Redo操作，并未考虑对象状态在操作过程中出现分支的情况。如果在撤销到某个历史状态之后，用户再修改对象状态，此后执行Undo操作时可能会发生对象状态错误，大家可以思考其产生原因。【注：可将对象状态的改变绘制成一张树状图进行分析。】")])]),e._v(" "),s("blockquote",[s("p",[e._v("在实际开发中，可以使用链表或者堆栈来处理有分支的对象状态改变，大家可通过链表或者堆栈对上述实例进行改进。")])])])}),[],!1,null,null,null);n.default=a.exports}}]);