(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{493:function(n,t,a){"use strict";a.r(t);var e=a(42),o=Object(e.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"请求发送者与接收者解耦-命令模式-四"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求发送者与接收者解耦-命令模式-四"}},[n._v("#")]),n._v(" 请求发送者与接收者解耦——命令模式（四）")]),n._v(" "),a("p",[n._v("5 撤销操作的实现")]),n._v(" "),a("p",[n._v("在命令模式中，我们可以通过调用一个命令对象的execute()方法来实现对请求的处理，如果需要撤销(Undo)请求，可通过在命令类中增加一个逆向操作来实现。")]),n._v(" "),a("p",[n._v("扩展")]),n._v(" "),a("p",[n._v("除了通过一个逆向操作来实现撤销(Undo)外，还可以通过保存对象的历史状态来实现撤销，后者可使用备忘录模式(Memento Pattern)来实现。")]),n._v(" "),a("p",[n._v("下面通过一个简单的实例来学习如何使用命令模式实现撤销操作：")]),n._v(" "),a("p",[n._v("Sunny软件公司欲开发一个简易计算器，该计算器可以实现简单的数学运算，还可以对运算实施撤销操作。")]),n._v(" "),a("p",[n._v("Sunny软件公司开发人员使用命令模式设计了如图5所示结构图，其中计算器界面类CalculatorForm充当请求发送者，实现了数据求和功能的加法类Adder充当请求接收者，界面类可间接调用加法类中的add()方法实现加法运算，并且提供了可撤销加法运算的undo()方法。")]),n._v(" "),a("p",[a("img",{attrs:{src:"http://img.my.csdn.net/uploads/201304/15/1366039384_7864.jpg",alt:""}})]),n._v(" "),a("p",[n._v("图5  简易计算器结构图")]),n._v(" "),a("p",[n._v("本实例完整代码如下所示：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('//加法类：请求接收者  \nclass Adder {  \n    private int num=0; //定义初始值为0  \n      \n    //加法操作，每次将传入的值与num作加法运算，再将结果返回  \n    public int add(int value) {  \n        num += value;  \n        return num;  \n    }  \n}  \n  \n//抽象命令类  \nabstract class AbstractCommand {  \n    public abstract int execute(int value); //声明命令执行方法execute()  \n    public abstract int undo(); //声明撤销方法undo()  \n}  \n  \n//具体命令类  \nclass ConcreteCommand extends AbstractCommand {  \n    private Adder adder = new Adder();  \n    private int value;  \n          \n    //实现抽象命令类中声明的execute()方法，调用加法类的加法操作  \npublic int execute(int value) {  \n        this.value=value;  \n        return adder.add(value);  \n    }  \n      \n    //实现抽象命令类中声明的undo()方法，通过加一个相反数来实现加法的逆向操作  \n    public int undo() {  \n        return adder.add(-value);  \n    }  \n}  \n  \n//计算器界面类：请求发送者  \nclass CalculatorForm {  \n    private AbstractCommand command;  \n      \n    public void setCommand(AbstractCommand command) {  \n        this.command = command;  \n    }  \n      \n    //调用命令对象的execute()方法执行运算  \n    public void compute(int value) {  \n        int i = command.execute(value);  \n        System.out.println("执行运算，运算结果为：" + i);  \n    }  \n      \n    //调用命令对象的undo()方法执行撤销  \n    public void undo() {  \n        int i = command.undo();  \n        System.out.println("执行撤销，运算结果为：" + i);  \n    }  \n}  \n')])])]),a("p",[n._v("编写如下客户端测试代码：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("class Client {  \n    public static void main(String args[]) {  \n        CalculatorForm form = new CalculatorForm();  \n        AbstractCommand command;  \n        command = new ConcreteCommand();  \n        form.setCommand(command); //向发送者注入命令对象  \n          \n        form.compute(10);  \n        form.compute(5);  \n        form.compute(10);  \n        form.undo();  \n    }  \n}  \n")])])]),a("p",[n._v("编译并运行程序，输出结果如下：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("执行运算，运算结果为：10\n执行运算，运算结果为：15\n执行运算，运算结果为：25\n执行撤销，运算结果为：15\n")])])]),a("p",[n._v("思考")]),n._v(" "),a("blockquote",[a("p",[n._v("如果连续调用“form.undo()”两次，预测客户端代码的输出结果。")])]),n._v(" "),a("blockquote",[a("p",[n._v("需要注意的是在本实例中只能实现一步撤销操作，因为没有保存命令对象的历史状态，可以通过引入一个命令集合或其他方式来存储每一次操作时命令的状态，从而实现多次撤销操作。除了Undo操作外，还可以采用类似的方式实现恢复(Redo)操作，即恢复所撤销的操作（或称为二次撤销）。")])]),n._v(" "),a("p",[n._v("练习")]),n._v(" "),a("blockquote",[a("p",[n._v("修改简易计算器源代码，使之能够实现多次撤销(Undo)和恢复(Redo)。")])])])}),[],!1,null,null,null);t.default=o.exports}}]);