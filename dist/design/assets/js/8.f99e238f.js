(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{353:function(t,e,a){"use strict";a.r(e);var s=a(42),p=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"不兼容结构的协调-适配器模式-三"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不兼容结构的协调-适配器模式-三"}},[t._v("#")]),t._v(" 不兼容结构的协调——适配器模式（三）")]),t._v(" "),a("p",[t._v("9.4 类适配器")]),t._v(" "),a("p",[t._v("除了对象适配器模式之外，适配器模式还有一种形式，那就是类适配器模式，类适配器模式和对象适配器模式最大的区别在于适配器和适配者之间的关系不同，对象适配器模式中适配器和适配者之间是关联关系，而类适配器模式中适配器和适配者是继承关系，类适配器模式结构如图9-5所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.my.csdn.net/uploads/201303/01/1362099343_7447.jpg",alt:""}})]),t._v(" "),a("p",[t._v("图 9-5 类适配器模式结构图")]),t._v(" "),a("p",[t._v("根据类适配器模式结构图，适配器类实现了抽象目标类接口Target，并继承了适配者类，在适配器类的request()方法中调用所继承的适配者类的specificRequest()方法，实现了适配。")]),t._v(" "),a("p",[t._v("典型的类适配器代码如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class Adapter extends Adaptee implements Target {  \n    public void request() {  \n        specificRequest();  \n    }  \n}  \n")])])]),a("p",[t._v("由于Java、C#等语言不支持多重类继承，因此类适配器的使用受到很多限制，例如如果目标抽象类Target不是接口，而是一个类，就无法使用类适配器；此外，如果适配者Adapter为最终(Final)类，也无法使用类适配器。在Java等面向对象编程语言中，大部分情况下我们使用的是对象适配器，类适配器较少使用。")]),t._v(" "),a("p",[t._v("思考")]),t._v(" "),a("blockquote",[a("p",[t._v("在类适配器中，一个适配器能否适配多个适配者？如果能，应该如何实现？如果不能，请说明原因？")])]),t._v(" "),a("p",[t._v("9.5 双向适配器")]),t._v(" "),a("p",[t._v("在对象适配器的使用过程中，如果在适配器中同时包含对目标类和适配者类的引用，适配者可以通过它调用目标类中的方法，目标类也可以通过它调用适配者类中的方法，那么该适配器就是一个双向适配器，其结构示意图如图9-6所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.my.csdn.net/uploads/201303/01/1362100282_9857.jpg",alt:""}})]),t._v(" "),a("p",[t._v("图9-6 双向适配器结构示意图")]),t._v(" "),a("p",[t._v("双向适配器的实现较为复杂，其典型代码如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class Adapter implements Target,Adaptee {  \n    //同时维持对抽象目标类和适配者的引用  \n    private Target target;  \n    private Adaptee adaptee;  \n      \n    public Adapter(Target target) {  \n        this.target = target;  \n    }  \n      \n    public Adapter(Adaptee adaptee) {  \n        this.adaptee = adaptee;  \n    }  \n      \n    public void request() {  \n        adaptee.specificRequest();  \n    }  \n      \n    public void specificRequest() {  \n        target.request();  \n    }  \n}  \n")])])]),a("p",[t._v("在实际开发中，我们很少使用双向适配器。")])])}),[],!1,null,null,null);e.default=p.exports}}]);