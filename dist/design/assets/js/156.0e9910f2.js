(window.webpackJsonp=window.webpackJsonp||[]).push([[156],{502:function(t,e,r){"use strict";r.r(e);var a=r(42),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"遍历聚合对象中的元素-迭代器模式-二"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#遍历聚合对象中的元素-迭代器模式-二"}},[t._v("#")]),t._v(" 遍历聚合对象中的元素——迭代器模式（二）")]),t._v(" "),r("p",[t._v("2 迭代器模式概述")]),t._v(" "),r("p",[t._v("在软件开发中，我们经常需要使用聚合对象来存储一系列数据。聚合对象拥有两个职责：一是存储数据；二是遍历数据。从依赖性来看，前者是聚合对象的基本职责；而后者既是可变化的，又是可分离的。因此，可以将遍历数据的行为从聚合对象中分离出来，封装在一个被称之为“迭代器”的对象中，由迭代器来提供遍历聚合对象内部数据的行为，这将简化聚合对象的设计，更符合“单一职责原则”的要求。")]),t._v(" "),r("p",[t._v("迭代器模式定义如下：")]),t._v(" "),r("p",[t._v("迭代器模式(Iterator Pattern)：提供一种方法来访问聚合对象，而不用暴露这个对象的内部表示，其别名为游标(Cursor)。迭代器模式是一种对象行为型模式。")]),t._v(" "),r("p",[t._v("在迭代器模式结构中包含聚合和迭代器两个层次结构，考虑到系统的灵活性和可扩展性，在迭代器模式中应用了工厂方法模式，其模式结构如图3所示：")]),t._v(" "),r("p",[r("img",{attrs:{src:"http://img.blog.csdn.net/20130815225537578?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTG92ZUxpb24=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",alt:""}})]),t._v(" "),r("p",[t._v("图3 迭代器模式结构图")]),t._v(" "),r("p",[t._v("在迭代器模式结构图中包含如下几个角色：")]),t._v(" "),r("p",[t._v("● Iterator（抽象迭代器）：它定义了访问和遍历元素的接口，声明了用于遍历数据元素的方法，例如：用于获取第一个元素的first()方法，用于访问下一个元素的next()方法，用于判断是否还有下一个元素的hasNext()方法，用于获取当前元素的currentItem()方法等，在具体迭代器中将实现这些方法。")]),t._v(" "),r("p",[t._v("● ConcreteIterator（具体迭代器）：它实现了抽象迭代器接口，完成对聚合对象的遍历，同时在具体迭代器中通过游标来记录在聚合对象中所处的当前位置，在具体实现时，游标通常是一个表示位置的非负整数。")]),t._v(" "),r("p",[t._v("● Aggregate（抽象聚合类）：它用于存储和管理元素对象，声明一个createIterator()方法用于创建一个迭代器对象，充当抽象迭代器工厂角色。")]),t._v(" "),r("p",[t._v("● ConcreteAggregate（具体聚合类）：它实现了在抽象聚合类中声明的createIterator()方法，该方法返回一个与该具体聚合类对应的具体迭代器ConcreteIterator实例。")]),t._v(" "),r("p",[t._v("在迭代器模式中，提供了一个外部的迭代器来对聚合对象进行访问和遍历，迭代器定义了一个访问该聚合元素的接口，并且可以跟踪当前遍历的元素，了解哪些元素已经遍历过而哪些没有。迭代器的引入，将使得对一个复杂聚合对象的操作变得简单。")]),t._v(" "),r("p",[t._v("下面我们结合代码来对迭代器模式的结构进行进一步分析。在迭代器模式中应用了工厂方法模式，抽象迭代器对应于抽象产品角色，具体迭代器对应于具体产品角色，抽象聚合类对应于抽象工厂角色，具体聚合类对应于具体工厂角色。")]),t._v(" "),r("p",[t._v("在抽象迭代器中声明了用于遍历聚合对象中所存储元素的方法，典型代码如下所示：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("interface Iterator {  \n    public void first(); //将游标指向第一个元素  \n    public void next(); //将游标指向下一个元素  \n    public boolean hasNext(); //判断是否存在下一个元素  \n    public Object currentItem(); //获取游标指向的当前元素  \n}  \n")])])]),r("p",[t._v("在具体迭代器中将实现抽象迭代器声明的遍历数据的方法，如下代码所示：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("class ConcreteIterator implements Iterator {  \n    private ConcreteAggregate objects; //维持一个对具体聚合对象的引用，以便于访问存储在聚合对象中的数据  \n    private int cursor; //定义一个游标，用于记录当前访问位置  \n    public ConcreteIterator(ConcreteAggregate objects) {  \n        this.objects=objects;  \n    }  \n  \n    public void first() {  ......  }  \n          \n    public void next() {  ......  }  \n  \n    public boolean hasNext() {  ......  }  \n      \n    public Object currentItem() {  ......  }  \n}  \n")])])]),r("p",[t._v("需要注意的是抽象迭代器接口的设计非常重要，一方面需要充分满足各种遍历操作的要求，尽量为各种遍历方法都提供声明，另一方面又不能包含太多方法，接口中方法太多将给子类的实现带来麻烦。因此，可以考虑使用抽象类来设计抽象迭代器，在抽象类中为每一个方法提供一个空的默认实现。如果需要在具体迭代器中为聚合对象增加全新的遍历操作，则必须修改抽象迭代器和具体迭代器的源代码，这将违反“开闭原则”，因此在设计时要考虑全面，避免之后修改接口。")]),t._v(" "),r("p",[t._v("聚合类用于存储数据并负责创建迭代器对象，最简单的抽象聚合类代码如下所示：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("interface Aggregate {  \n    Iterator createIterator();  \n}  \n")])])]),r("p",[t._v("具体聚合类作为抽象聚合类的子类，一方面负责存储数据，另一方面实现了在抽象聚合类中声明的工厂方法createIterator()，用于返回一个与该具体聚合类对应的具体迭代器对象，代码如下所示：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("class ConcreteAggregate implements Aggregate {    \n    ......    \n    public Iterator createIterator() {  \n    return new ConcreteIterator(this);  \n    }  \n    ......  \n}  \n")])])]),r("p",[t._v("思考")]),t._v(" "),r("blockquote",[r("p",[t._v("理解迭代器模式中具体聚合类与具体迭代器类之间存在的依赖关系和关联关系。")])])])}),[],!1,null,null,null);e.default=n.exports}}]);