(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{403:function(e,t,r){"use strict";r.r(t);var n=r(42),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"对象间的联动-观察者模式-二"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对象间的联动-观察者模式-二"}},[e._v("#")]),e._v(" 对象间的联动——观察者模式（二）")]),e._v(" "),r("p",[e._v("22.2  观察者模式概述")]),e._v(" "),r("p",[e._v("观察者模式是使用频率最高的设计模式之一，它用于建立一种对象与对象之间的依赖关系，一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应。在观察者模式中，发生改变的对象称为观察目标，而被通知的对象称为观察者，一个观察目标可以对应多个观察者，而且这些观察者之间可以没有任何相互联系，可以根据需要增加和删除观察者，使得系统更易于扩展。")]),e._v(" "),r("p",[e._v("观察者模式定义如下：\n观察者模式(Observer Pattern)：定义对象之间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。观察者模式的别名包括发布-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-监听器（Source/Listener）模式或从属者（Dependents）模式。观察者模式是一种对象行为型模式。")]),e._v(" "),r("p",[e._v("观察者模式结构中通常包括观察目标和观察者两个继承层次结构，其结构如图22-3所示：")]),e._v(" "),r("p",[r("img",{attrs:{src:"http://my.csdn.net/uploads/201207/05/1341501815_4830.jpg",alt:""}})]),e._v(" "),r("p",[e._v("图22-3  观察者模式结构图")]),e._v(" "),r("p",[e._v("在观察者模式结构图中包含如下几个角色：")]),e._v(" "),r("p",[e._v("● Subject（目标）：目标又称为主题，它是指被观察的对象。在目标中定义了一个观察者集合，一个观察目标可以接受任意数量的观察者来观察，它提供一系列方法来增加和删除观察者对象，同时它定义了通知方法notify()。目标类可以是接口，也可以是抽象类或具体类。")]),e._v(" "),r("p",[e._v("● ConcreteSubject（具体目标）：具体目标是目标类的子类，通常它包含有经常发生改变的数据，当它的状态发生改变时，向它的各个观察者发出通知；同时它还实现了在目标类中定义的抽象业务逻辑方法（如果有的话）。如果无须扩展目标类，则具体目标类可以省略。")]),e._v(" "),r("p",[e._v("● Observer（观察者）：观察者将对观察目标的改变做出反应，观察者一般定义为接口，该接口声明了更新数据的方法update()，因此又称为抽象观察者。")]),e._v(" "),r("p",[e._v("● ConcreteObserver（具体观察者）：在具体观察者中维护一个指向具体目标对象的引用，它存储具体观察者的有关状态，这些状态需要和具体目标的状态保持一致；它实现了在抽象观察者Observer中定义的update()方法。通常在实现时，可以调用具体目标类的attach()方法将自己添加到目标类的集合中或通过detach()方法将自己从目标类的集合中删除。")]),e._v(" "),r("p",[e._v("观察者模式描述了如何建立对象与对象之间的依赖关系，以及如何构造满足这种需求的系统。观察者模式包含观察目标和观察者两类对象，一个目标可以有任意数目的与之相依赖的观察者，一旦观察目标的状态发生改变，所有的观察者都将得到通知。作为对这个通知的响应，每个观察者都将监视观察目标的状态以使其状态与目标状态同步，这种交互也称为发布-订阅(Publish-Subscribe)。观察目标是通知的发布者，它发出通知时并不需要知道谁是它的观察者，可以有任意数目的观察者订阅它并接收通知。\n下面通过示意代码来对该模式进行进一步分析。首先我们定义一个抽象目标Subject，典型代码如下所示：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("import java.util.*;  \nabstract class Subject {  \n    //定义一个观察者集合用于存储所有观察者对象  \nprotected ArrayList observers<Observer> = new ArrayList();  \n  \n//注册方法，用于向观察者集合中增加一个观察者  \n    public void attach(Observer observer) {  \n    observers.add(observer);  \n}  \n  \n    //注销方法，用于在观察者集合中删除一个观察者  \n    public void detach(Observer observer) {  \n    observers.remove(observer);  \n}  \n  \n    //声明抽象通知方法  \n    public abstract void notify();  \n}  \n      具体目标类ConcreteSubject是实现了抽象目标类Subject的一个具体子类，其典型代码如下所示：\n[java] view plain copy\nclass ConcreteSubject extends Subject {  \n    //实现通知方法  \n    public void notify() {  \n        //遍历观察者集合，调用每一个观察者的响应方法  \n        for(Object obs:observers) {  \n            ((Observer)obs).update();  \n        }  \n    }     \n}  \n")])])]),r("p",[e._v("抽象观察者角色一般定义为一个接口，通常只声明一个update()方法，为不同观察者的更新（响应）行为定义相同的接口，这个方法在其子类中实现，不同的观察者具有不同的响应方法。抽象观察者Observer典型代码如下所示：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("interface Observer {  \n    //声明响应方法  \n    public void update();  \n}  \n      在具体观察者ConcreteObserver中实现了update()方法，其典型代码如下所示：\n[java] view plain copy\nclass ConcreteObserver implements Observer {  \n    //实现响应方法  \n    public void update() {  \n        //具体响应代码  \n    }  \n}  \n")])])]),r("p",[e._v("在有些更加复杂的情况下，具体观察者类ConcreteObserver的update()方法在执行时需要使用到具体目标类ConcreteSubject中的状态（属性），因此在ConcreteObserver与ConcreteSubject之间有时候还存在关联或依赖关系，在ConcreteObserver中定义一个ConcreteSubject实例，通过该实例获取存储在ConcreteSubject中的状态。如果ConcreteObserver的update()方法不需要使用到ConcreteSubject中的状态属性，则可以对观察者模式的标准结构进行简化，在具体观察者ConcreteObserver和具体目标ConcreteSubject之间无须维持对象引用。如果在具体层具有关联关系，系统的扩展性将受到一定的影响，增加新的具体目标类有时候需要修改原有观察者的代码，在一定程度上违反了“开闭原则”，但是如果原有观察者类无须关联新增的具体目标，则系统扩展性不受影响。")]),e._v(" "),r("p",[e._v("思考")]),e._v(" "),r("blockquote",[r("p",[e._v("观察者模式是否符合“开闭原则”？【从增加具体观察者和增加具体目标类两方面考虑。】")])])])}),[],!1,null,null,null);t.default=s.exports}}]);