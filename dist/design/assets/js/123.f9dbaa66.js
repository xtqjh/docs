(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{469:function(n,t,e){"use strict";e.r(t);var i=e(42),r=Object(i.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"自定义语言的实现-解释器模式-四"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义语言的实现-解释器模式-四"}},[n._v("#")]),n._v(" 自定义语言的实现——解释器模式（四）")]),n._v(" "),e("p",[n._v("18.4 完整解决方案")]),n._v(" "),e("p",[n._v("为了能够解释机器人控制指令，Sunny软件公司开发人员使用解释器模式来设计和实现机器人控制程序。针对五条文法规则，分别提供五个类来实现，其中终结符表达式direction、action和distance对应DirectionNode类、ActionNode类和DistanceNode类，非终结符表达式expression和composite对应SentenceNode类和AndNode类。")]),n._v(" "),e("p",[n._v("我们可以通过抽象语法树来表示具体解释过程，例如机器人控制指令“down run 10 and left move 20”对应的抽象语法树如图18-4所示：")]),n._v(" "),e("p",[e("img",{attrs:{src:"http://my.csdn.net/uploads/201207/04/1341331816_4096.jpg",alt:""}})]),n._v(" "),e("p",[n._v("图18-4   机器人控制程序抽象语法树实例")]),n._v(" "),e("p",[n._v("机器人控制程序实例基本结构如图18-5所示：")]),n._v(" "),e("p",[e("img",{attrs:{src:"http://my.csdn.net/uploads/201207/04/1341331826_7970.jpg",alt:""}})]),n._v(" "),e("p",[n._v("图18-5   机器人控制程序结构图")]),n._v(" "),e("p",[n._v("在图18-5中，AbstractNode充当抽象表达式角色，DirectionNode、ActionNode和DistanceNode充当终结符表达式角色，AndNode和SentenceNode充当非终结符表达式角色。完整代码如下所示：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//注：本实例对机器人控制指令的输出结果进行模拟，将英文指令翻译为中文指令，实际情况是调用不同的控制程序进行机器人的控制，包括对移动方向、方式和距离的控制等  \nimport java.util.*;  \n  \n//抽象表达式  \nabstract class AbstractNode {  \n    public abstract String interpret();  \n}  \n  \n//And解释：非终结符表达式  \nclass AndNode extends AbstractNode {  \n    private AbstractNode left; //And的左表达式  \n    private AbstractNode right; //And的右表达式  \n  \n    public AndNode(AbstractNode left, AbstractNode right) {  \n        this.left = left;  \n        this.right = right;  \n    }  \n      \n    //And表达式解释操作  \n    public String interpret() {  \n        return left.interpret() + "再" + right.interpret();  \n    }  \n}  \n  \n//简单句子解释：非终结符表达式  \nclass SentenceNode extends AbstractNode {  \n    private AbstractNode direction;  \n    private AbstractNode action;  \n    private AbstractNode distance;  \n  \n    public SentenceNode(AbstractNode direction,AbstractNode action,AbstractNode distance) {  \n        this.direction = direction;  \n        this.action = action;  \n        this.distance = distance;  \n    }  \n      \n    //简单句子的解释操作  \n    public String interpret() {  \n        return direction.interpret() + action.interpret() + distance.interpret();  \n    }     \n}  \n  \n//方向解释：终结符表达式  \nclass DirectionNode extends AbstractNode {  \n    private String direction;  \n      \n    public DirectionNode(String direction) {  \n        this.direction = direction;  \n    }  \n      \n    //方向表达式的解释操作  \n    public String interpret() {  \n        if (direction.equalsIgnoreCase("up")) {  \n            return "向上";  \n        }  \n        else if (direction.equalsIgnoreCase("down")) {  \n            return "向下";  \n        }  \n        else if (direction.equalsIgnoreCase("left")) {  \n            return "向左";  \n        }  \n        else if (direction.equalsIgnoreCase("right")) {  \n            return "向右";  \n        }  \n        else {  \n            return "无效指令";  \n        }  \n    }  \n}  \n  \n//动作解释：终结符表达式  \nclass ActionNode extends AbstractNode {  \n    private String action;  \n      \n    public ActionNode(String action) {  \n        this.action = action;  \n    }  \n      \n    //动作（移动方式）表达式的解释操作  \n    public String interpret() {  \n        if (action.equalsIgnoreCase("move")) {  \n            return "移动";  \n        }  \n        else if (action.equalsIgnoreCase("run")) {  \n            return "快速移动";  \n        }  \n        else {  \n            return "无效指令";  \n        }  \n    }  \n}  \n  \n//距离解释：终结符表达式  \nclass DistanceNode extends AbstractNode {  \n    private String distance;  \n      \n    public DistanceNode(String distance) {  \n        this.distance = distance;  \n    }  \n      \n//距离表达式的解释操作  \n    public String interpret() {  \n        return this.distance;  \n    }     \n}  \n  \n//指令处理类：工具类  \nclass InstructionHandler {  \n    private String instruction;  \n    private AbstractNode node;  \n      \n    public void handle(String instruction) {  \n        AbstractNode left = null, right = null;  \n        AbstractNode direction = null, action = null, distance = null;  \n        Stack stack = new Stack(); //声明一个栈对象用于存储抽象语法树  \n        String[] words = instruction.split(" "); //以空格分隔指令字符串  \n        for (int i = 0; i < words.length; i++) {  \n//本实例采用栈的方式来处理指令，如果遇到“and”，则将其后的三个单词作为三个终结符表达式连成一个简单句子SentenceNode作为“and”的右表达式，而将从栈顶弹出的表达式作为“and”的左表达式，最后将新的“and”表达式压入栈中。                   if (words[i].equalsIgnoreCase("and")) {  \n                left = (AbstractNode)stack.pop(); //弹出栈顶表达式作为左表达式  \n                String word1= words[++i];  \n                direction = new DirectionNode(word1);  \n                String word2 = words[++i];  \n                action = new ActionNode(word2);  \n                String word3 = words[++i];  \n                distance = new DistanceNode(word3);  \n                right = new SentenceNode(direction,action,distance); //右表达式  \n                stack.push(new AndNode(left,right)); //将新表达式压入栈中  \n            }  \n            //如果是从头开始进行解释，则将前三个单词组成一个简单句子SentenceNode并将该句子压入栈中  \n            else {  \n                String word1 = words[i];  \n                direction = new DirectionNode(word1);  \n                String word2 = words[++i];  \n                action = new ActionNode(word2);  \n                String word3 = words[++i];  \n                distance = new DistanceNode(word3);  \n                left = new SentenceNode(direction,action,distance);  \n                stack.push(left); //将新表达式压入栈中  \n            }  \n        }  \n        this.node = (AbstractNode)stack.pop(); //将全部表达式从栈中弹出  \n    }  \n      \n    public String output() {  \n        String result = node.interpret(); //解释表达式  \n        return result;  \n    }  \n}  \n\n')])])]),e("p",[n._v("工具类InstructionHandler用于对输入指令进行处理，将输入指令分割为字符串数组，将第1个、第2个和第3个单词组合成一个句子，并存入栈中；如果发现有单词“and”，则将“and”后的第1个、第2个和第3个单词组合成一个新的句子作为“and”的右表达式，并从栈中取出原先所存句子作为左表达式，然后组合成一个And节点存入栈中。依此类推，直到整个指令解析结束。")]),n._v(" "),e("p",[n._v("编写如下客户端测试代码：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('class Client {  \n    public static void main(String args[]) {  \n        String instruction = "up move 5 and down run 10 and left move 5";  \n        InstructionHandler handler = new InstructionHandler();  \n        handler.handle(instruction);  \n        String outString;  \n        outString = handler.output();  \n        System.out.println(outString);  \n    }  \n}  \n')])])]),e("p",[n._v("编译并运行程序，输出结果如下：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("向上移动5再向下快速移动10再向左移动5\n\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);