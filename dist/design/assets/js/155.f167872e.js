(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{501:function(t,r,n){"use strict";n.r(r);var s=n(42),e=Object(s.a)({},(function(){var t=this,r=t.$createElement,n=t._self._c||r;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"遍历聚合对象中的元素-迭代器模式-三"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#遍历聚合对象中的元素-迭代器模式-三"}},[t._v("#")]),t._v(" 遍历聚合对象中的元素——迭代器模式（三）")]),t._v(" "),n("p",[t._v("3 完整解决方案")]),t._v(" "),n("p",[t._v("为了简化AbstractObjectList类的结构，并给不同的具体数据集合类提供不同的遍历方式，Sunny软件公司开发人员使用迭代器模式来重构AbstractObjectList类的设计，重构之后的销售管理系统数据遍历结构如图4所示：")]),t._v(" "),n("p",[n("img",{attrs:{src:"http://img.blog.csdn.net/20130815232323562?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTG92ZUxpb24=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",alt:""}})]),t._v(" "),n("p",[t._v("图4 销售管理系统数据遍历结构图")]),t._v(" "),n("p",[t._v("（注：为了简化类图和代码，本结构图中只提供一个具体聚合类和具体迭代器类）")]),t._v(" "),n("p",[t._v("在图4中，AbstractObjectList充当抽象聚合类，ProductList充当具体聚合类，AbstractIterator充当抽象迭代器，ProductIterator充当具体迭代器。完整代码如下所示：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("//在本实例中，为了详细说明自定义迭代器的实现过程，我们没有使用JDK中内置的迭代器，事实上，JDK内置迭代器已经实现了对一个List对象的正向遍历  \nimport java.util.*;  \n  \n//抽象聚合类  \nabstract class AbstractObjectList {  \n    protected List<Object> objects = new ArrayList<Object>();  \n  \n    public AbstractObjectList(List objects) {  \n        this.objects = objects;  \n    }  \n      \n    public void addObject(Object obj) {  \n        this.objects.add(obj);  \n    }  \n      \n    public void removeObject(Object obj) {  \n        this.objects.remove(obj);  \n    }  \n      \n    public List getObjects() {  \n        return this.objects;  \n    }  \n      \n    //声明创建迭代器对象的抽象工厂方法  \n    public abstract AbstractIterator createIterator();  \n}  \n  \n//商品数据类：具体聚合类  \nclass ProductList extends AbstractObjectList {  \n    public ProductList(List products) {  \n        super(products);  \n    }  \n      \n    //实现创建迭代器对象的具体工厂方法  \n    public AbstractIterator createIterator() {  \n        return new ProductIterator(this);  \n    }  \n}   \n  \n//抽象迭代器  \ninterface AbstractIterator {  \n    public void next(); //移至下一个元素  \n    public boolean isLast(); //判断是否为最后一个元素  \n    public void previous(); //移至上一个元素  \n    public boolean isFirst(); //判断是否为第一个元素  \n    public Object getNextItem(); //获取下一个元素  \n    public Object getPreviousItem(); //获取上一个元素  \n}  \n  \n//商品迭代器：具体迭代器  \nclass ProductIterator implements AbstractIterator {  \n    private ProductList productList;  \n    private List products;  \n    private int cursor1; //定义一个游标，用于记录正向遍历的位置  \n    private int cursor2; //定义一个游标，用于记录逆向遍历的位置  \n      \n    public ProductIterator(ProductList list) {  \n        this.productList = list;  \n        this.products = list.getObjects(); //获取集合对象  \n        cursor1 = 0; //设置正向遍历游标的初始值  \n        cursor2 = products.size() -1; //设置逆向遍历游标的初始值  \n    }  \n      \n    public void next() {  \n        if(cursor1 < products.size()) {  \n            cursor1++;  \n        }  \n    }  \n      \n    public boolean isLast() {  \n        return (cursor1 == products.size());  \n    }  \n      \n    public void previous() {  \n        if (cursor2 > -1) {  \n            cursor2--;  \n        }  \n    }  \n      \n    public boolean isFirst() {  \n        return (cursor2 == -1);  \n    }  \n      \n    public Object getNextItem() {  \n        return products.get(cursor1);  \n    }   \n          \n    public Object getPreviousItem() {  \n        return products.get(cursor2);  \n    }     \n}  \n")])])]),n("p",[t._v("编写如下客户端测试代码：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('class Client {  \n    public static void main(String args[]) {  \n        List products = new ArrayList();  \n        products.add("倚天剑");  \n        products.add("屠龙刀");  \n        products.add("断肠草");  \n        products.add("葵花宝典");  \n        products.add("四十二章经");  \n              \n        AbstractObjectList list;  \n        AbstractIterator iterator;  \n          \n        list = new ProductList(products); //创建聚合对象  \n        iterator = list.createIterator();   //创建迭代器对象  \n          \n        System.out.println("正向遍历：");      \n        while(!iterator.isLast()) {  \n            System.out.print(iterator.getNextItem() + "，");  \n            iterator.next();  \n        }  \n        System.out.println();  \n        System.out.println("-----------------------------");  \n        System.out.println("逆向遍历：");  \n        while(!iterator.isFirst()) {  \n            System.out.print(iterator.getPreviousItem() + "，");  \n            iterator.previous();  \n        }  \n    }  \n}  \n')])])]),n("p",[t._v("编译并运行程序，输出结果如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("正向遍历：\n倚天剑，屠龙刀，断肠草，葵花宝典，四十二章经，\n-----------------------------\n逆向遍历：\n四十二章经，葵花宝典，断肠草，屠龙刀，倚天剑，\n")])])]),n("p",[t._v("如果需要增加一个新的具体聚合类，如客户数据集合类，并且需要为客户数据集合类提供不同于商品数据集合类的正向遍历和逆向遍历操作，只需增加一个新的聚合子类和一个新的具体迭代器类即可，原有类库代码无须修改，符合“开闭原则”；如果需要为ProductList类更换一个迭代器，只需要增加一个新的具体迭代器类作为抽象迭代器类的子类，重新实现遍历方法，原有迭代器代码无须修改，也符合“开闭原则”；但是如果要在迭代器中增加新的方法，则需要修改抽象迭代器源代码，这将违背“开闭原则”。")])])}),[],!1,null,null,null);r.default=e.exports}}]);