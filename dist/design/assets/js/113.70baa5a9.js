(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{459:function(n,t,e){"use strict";e.r(t);var s=e(42),c=Object(s.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"算法的封装与切换-策略模式-三"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算法的封装与切换-策略模式-三"}},[n._v("#")]),n._v(" 算法的封装与切换——策略模式（三）")]),n._v(" "),e("p",[n._v("24.3 完整解决方案")]),n._v(" "),e("p",[n._v("为了实现打折算法的复用，并能够灵活地向系统中增加新的打折方式，Sunny软件公司开发人员使用策略模式对电影院打折方案进行重构，重构后基本结构如图24-2所示：")]),n._v(" "),e("p",[e("img",{attrs:{src:"http://my.csdn.net/uploads/201208/01/1343811809_8784.jpg",alt:""}})]),n._v(" "),e("p",[n._v("在图24-2中，MovieTicket充当环境类角色，Discount充当抽象策略角色，StudentDiscount、 ChildrenDiscount 和VIPDiscount充当具体策略角色。完整代码如下所示：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//电影票类：环境类  \nclass MovieTicket {  \n    private double price;  \n    private Discount discount; //维持一个对抽象折扣类的引用  \n  \n    public void setPrice(double price) {  \n        this.price = price;  \n    }  \n  \n    //注入一个折扣类对象  \n    public void setDiscount(Discount discount) {  \n        this.discount = discount;  \n    }  \n  \n    public double getPrice() {  \n        //调用折扣类的折扣价计算方法  \n        return discount.calculate(this.price);  \n    }  \n}  \n  \n//折扣类：抽象策略类  \ninterface Discount {  \n    public double calculate(double price);  \n}  \n  \n//学生票折扣类：具体策略类  \nclass StudentDiscount implements Discount {  \n    public double calculate(double price) {  \n        System.out.println("学生票：");  \n        return price * 0.8;  \n    }  \n}   \n  \n//儿童票折扣类：具体策略类  \nclass ChildrenDiscount implements Discount {  \n    public double calculate(double price) {  \n        System.out.println("儿童票：");  \n        return price - 10;  \n    }  \n}   \n  \n//VIP会员票折扣类：具体策略类  \nclass VIPDiscount implements Discount {  \n    public double calculate(double price) {  \n        System.out.println("VIP票：");  \n        System.out.println("增加积分！");  \n        return price * 0.5;  \n    }  \n}  \n')])])]),e("p",[n._v("为了提高系统的灵活性和可扩展性，我们将具体策略类的类名存储在配置文件中，并通过工具类XMLUtil来读取配置文件并反射生成对象，XMLUtil类的代码如下所示：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('import javax.xml.parsers.*;  \nimport org.w3c.dom.*;  \nimport org.xml.sax.SAXException;  \nimport java.io.*;  \nclass XMLUtil {  \n//该方法用于从XML配置文件中提取具体类类名，并返回一个实例对象  \n    public static Object getBean() {  \n        try {  \n            //创建文档对象  \n            DocumentBuilderFactory dFactory = DocumentBuilderFactory.newInstance();  \n            DocumentBuilder builder = dFactory.newDocumentBuilder();  \n            Document doc;                             \n            doc = builder.parse(new File("config.xml"));   \n          \n            //获取包含类名的文本节点  \n            NodeList nl = doc.getElementsByTagName("className");  \n            Node classNode=nl.item(0).getFirstChild();  \n            String cName=classNode.getNodeValue();  \n              \n            //通过类名生成实例对象并将其返回  \n            Class c=Class.forName(cName);  \n            Object obj=c.newInstance();  \n            return obj;  \n        }     \n        catch(Exception e) {  \n            e.printStackTrace();  \n            return null;  \n        }  \n    }  \n}  \n')])])]),e("p",[n._v("在配置文件config.xml中存储了具体策略类的类名，代码如下所示：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<?xml version="1.0"?>  \n<config>  \n    <className>StudentDiscount</className>  \n</config>  \n')])])]),e("p",[n._v("编写如下客户端测试代码：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('class Client {  \n    public static void main(String args[]) {  \n        MovieTicket mt = new MovieTicket();  \n        double originalPrice = 60.0;  \n        double currentPrice;  \n          \n        mt.setPrice(originalPrice);  \n        System.out.println("原始价为：" + originalPrice);  \n        System.out.println("---------------------------------");  \n              \n        Discount discount;  \n        discount = (Discount)XMLUtil.getBean(); //读取配置文件并反射生成具体折扣对象  \n        mt.setDiscount(discount); //注入折扣对象  \n          \n        currentPrice = mt.getPrice();  \n        System.out.println("折后价为：" + currentPrice);  \n    }  \n}  \n')])])]),e("p",[n._v("编译并运行程序，输出结果如下：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("原始价为：60.0\n---------------------------------\n学生票：\n折后价为：48.0\n")])])]),e("p",[n._v("如果需要更换具体策略类，无须修改源代码，只需修改配置文件，例如将学生票改为儿童票，只需将存储在配置文件中的具体策略类StudentDiscount改为ChildrenDiscount，如下代码所示：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<?xml version="1.0"?>  \n<config>  \n    <className>ChildrenDiscount</className>  \n</config>  \n')])])]),e("p",[n._v("重新运行客户端程序，输出结果如下：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("原始价为：60.0\n---------------------------------\n儿童票：\n折后价为：50.0\n")])])]),e("p",[n._v("如果需要增加新的打折方式，原有代码均无须修改，只要增加一个新的折扣类作为抽象折扣类的子类，实现在抽象折扣类中声明的打折方法，然后修改配置文件，将原有具体折扣类类名改为新增折扣类类名即可，完全符合“开闭原则”。")])])}),[],!1,null,null,null);t.default=c.exports}}]);