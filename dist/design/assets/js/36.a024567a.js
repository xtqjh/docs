(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{382:function(e,t,v){"use strict";v.r(t);var _=v(42),n=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"处理对象的多种状态及其相互转换-状态模式-六"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#处理对象的多种状态及其相互转换-状态模式-六"}},[e._v("#")]),e._v(" 处理对象的多种状态及其相互转换——状态模式（六）")]),e._v(" "),v("p",[e._v("6 状态模式总结")]),e._v(" "),v("p",[e._v("状态模式将一个对象在不同状态下的不同行为封装在一个个状态类中，通过设置不同的状态对象可以让环境对象拥有不同的行为，而状态转换的细节对于客户端而言是透明的，方便了客户端的使用。在实际开发中，状态模式具有较高的使用频率，在工作流和游戏开发中状态模式都得到了广泛的应用，例如公文状态的转换、游戏中角色的升级等。")]),e._v(" "),v("ol",[v("li",[e._v("主要优点")])]),e._v(" "),v("p",[e._v("状态模式的主要优点如下：")]),e._v(" "),v("p",[e._v("(1) 封装了状态的转换规则，在状态模式中可以将状态的转换代码封装在环境类或者具体状态类中，可以对状态转换代码进行集中管理，而不是分散在一个个业务方法中。")]),e._v(" "),v("p",[e._v("(2) 将所有与某个状态有关的行为放到一个类中，只需要注入一个不同的状态对象即可使环境对象拥有不同的行为。")]),e._v(" "),v("p",[e._v("(3) 允许状态转换逻辑与状态对象合成一体，而不是提供一个巨大的条件语句块，状态模式可以让我们避免使用庞大的条件语句来将业务方法和状态转换代码交织在一起。")]),e._v(" "),v("p",[e._v("(4) 可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。")]),e._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[e._v("主要缺点")])]),e._v(" "),v("p",[e._v("状态模式的主要缺点如下：")]),e._v(" "),v("p",[e._v("(1) 状态模式的使用必然会增加系统中类和对象的个数，导致系统运行开销增大。")]),e._v(" "),v("p",[e._v("(2) 状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱，增加系统设计的难度。")]),e._v(" "),v("p",[e._v("(3) 状态模式对“开闭原则”的支持并不太好，增加新的状态类需要修改那些负责状态转换的源代码，否则无法转换到新增状态；而且修改某个状态类的行为也需修改对应类的源代码。")]),e._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[e._v("适用场景")])]),e._v(" "),v("p",[e._v("在以下情况下可以考虑使用状态模式：")]),e._v(" "),v("p",[e._v("(1) 对象的行为依赖于它的状态（如某些属性值），状态的改变将导致行为的变化。")]),e._v(" "),v("p",[e._v("(2) 在代码中包含大量与对象状态有关的条件语句，这些条件语句的出现，会导致代码的可维护性和灵活性变差，不能方便地增加和删除状态，并且导致客户类与类库之间的耦合增强。")]),e._v(" "),v("p",[e._v("练习")]),e._v(" "),v("blockquote",[v("p",[e._v("Sunny软件公司欲开发一款纸牌游戏软件，在该游戏软件中用户角色具有入门级(Primary)、熟练级(Secondary)、高手级(Professional)和骨灰级(Final)四种等级，角色的等级与其积分相对应，游戏胜利将增加积分，失败则扣除积分。入门级具有最基本的游戏功能play() ，熟练级增加了游戏胜利积分加倍功能doubleScore()，高手级在熟练级基础上再增加换牌功能changeCards()，骨灰级在高手级基础上再增加偷看他人的牌功能peekCards()。")])]),e._v(" "),v("p",[e._v("试使用状态模式来设计该系统。")]),e._v(" "),v("p",[e._v("7 练习")]),e._v(" "),v("p",[e._v("(1) 分析如下代码：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("class TestXYZ {  \n    int behaviour;  \n    //Getter and Setter  \n    ......  \n    public void handleAll() {  \n        if (behaviour == 0) { //do something }  \n        else if (behaviour == 1) { //do something }  \n        else if (behaviour == 2) { //do something }  \n        else if (behaviour == 3) { //do something }  \n        ... some more else if ...  \n    }  \n}  \n")])])]),v("p",[e._v("为了提高代码的扩展性和健壮性，可以使用(    )设计模式来进行重构。\nA. Visitor（访问者）                     B. Facade（外观）\nC. Memento（备忘录）               D. State（状态）")]),e._v(" "),v("p",[e._v("(2) 传输门是传输系统中的重要装置。传输门具有Open（打开）、Closed（关闭）、Opening（正在打开）、StayOpen（保持打开）、Closing（正在关闭）五种状态。触发状态的转换事件有click、complete和timeout三种。事件与其相应的状态转换如图7所示。")]),e._v(" "),v("p",[v("img",{attrs:{src:"http://img.my.csdn.net/uploads/201301/20/1358695550_1995.jpg",alt:""}})]),e._v(" "),v("p",[e._v("图7 传输门响应事件与其状态转换图")]),e._v(" "),v("p",[e._v("试使用状态模式对传输门进行状态模拟，要求绘制相应的类图并编程模拟实现。")])])}),[],!1,null,null,null);t.default=n.exports}}]);