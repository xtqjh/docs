(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{491:function(n,t,e){"use strict";e.r(t);var a=e(42),i=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"请求发送者与接收者解耦-命令模式-五"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请求发送者与接收者解耦-命令模式-五"}},[n._v("#")]),n._v(" 请求发送者与接收者解耦——命令模式（五）")]),n._v(" "),e("p",[n._v("6 请求日志")]),n._v(" "),e("p",[n._v("请求日志就是将请求的历史记录保存下来，通常以日志文件(Log File)的形式永久存储在计算机中。很多系统都提供了日志文件，例如Windows日志文件、Oracle日志文件等，日志文件可以记录用户对系统的一些操作（例如对数据的更改）。请求日志文件可以实现很多功能，常用功能如下：")]),n._v(" "),e("p",[n._v("(1) “天有不测风云”，一旦系统发生故障，日志文件可以为系统提供一种恢复机制，在请求日志文件中可以记录用户对系统的每一步操作，从而让系统能够顺利恢复到某一个特定的状态；")]),n._v(" "),e("p",[n._v("(2) 请求日志也可以用于实现批处理，在一个请求日志文件中可以存储一系列命令对象，例如一个命令队列；")]),n._v(" "),e("p",[n._v("(3) 可以将命令队列中的所有命令对象都存储在一个日志文件中，每执行一个命令则从日志文件中删除一个对应的命令对象，防止因为断电或者系统重启等原因造成请求丢失，而且可以避免重新发送全部请求时造成某些命令的重复执行，只需读取请求日志文件，再继续执行文件中剩余的命令即可。")]),n._v(" "),e("p",[n._v("在实现请求日志时，我们可以将命令对象通过序列化写到日志文件中，此时命令类必须实现Java.io.Serializable接口。下面我们通过一个简单实例来说明日志文件的用途以及如何实现请求日志：")]),n._v(" "),e("p",[n._v("Sunny软件公司开发了一个网站配置文件管理工具，可以通过一个可视化界面对网站配置文件进行增删改等操作，该工具使用命令模式进行设计，结构如图6所示：")]),n._v(" "),e("p",[e("img",{attrs:{src:"http://img.my.csdn.net/uploads/201304/15/1366040729_7038.jpg",alt:""}})]),n._v(" "),e("p",[n._v("图6  网站配置文件管理工具结构图")]),n._v(" "),e("p",[n._v("现在Sunny软件公司开发人员希望将对配置文件的操作请求记录在日志文件中，如果网站重新部署，只需要执行保存在日志文件中的命令对象即可修改配置文件。")]),n._v(" "),e("p",[n._v("本实例完整代码如下所示：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('import java.io.*;  \nimport java.util.*;  \n  \n//抽象命令类，由于需要将命令对象写入文件，因此它实现了Serializable接口  \nabstract class Command implements Serializable {  \n    protected String name; //命令名称  \n    protected String args; //命令参数  \n    protected ConfigOperator configOperator; //维持对接收者对象的引用  \n      \n    public Command(String name) {  \n        this.name = name;  \n    }  \n      \n    public String getName() {  \n        return this.name;  \n    }  \n      \n    public void setName(String name) {  \n        this.name = name;  \n    }  \n      \n    public void setConfigOperator(ConfigOperator configOperator) {  \n        this.configOperator = configOperator;  \n    }  \n      \n    //声明两个抽象的执行方法execute()  \n    public abstract void execute(String args);  \n    public abstract void execute();  \n}  \n  \n//增加命令类：具体命令  \nclass InsertCommand extends Command {  \n    public InsertCommand(String name) {  \n        super(name);  \n    }  \n      \n    public void execute(String args) {  \n        this.args = args;  \n        configOperator.insert(args);  \n    }  \n      \n    public void execute() {  \n        configOperator.insert(this.args);  \n    }  \n}  \n  \n//修改命令类：具体命令  \nclass ModifyCommand extends Command {  \n    public ModifyCommand(String name) {  \n        super(name);  \n    }  \n      \n    public void execute(String args) {  \n        this.args = args;  \n        configOperator.modify(args);  \n    }  \n      \n    public void execute() {  \n        configOperator.modify(this.args);  \n    }  \n}  \n  \n//省略了删除命令类DeleteCommand  \n  \n//配置文件操作类：请求接收者。由于ConfigOperator类的对象是Command的成员对象，它也将随Command对象一起写入文件，因此ConfigOperator也需要实现Serializable接口  \nclass ConfigOperator implements Serializable {  \n    public void insert(String args) {  \n        System.out.println("增加新节点：" + args);  \n    }  \n      \n    public void modify(String args) {  \n        System.out.println("修改节点：" + args);  \n    }  \n      \n    public void delete(String args) {  \n        System.out.println("删除节点：" + args);  \n    }  \n}  \n  \n//配置文件设置窗口类：请求发送者  \nclass ConfigSettingWindow {  \n    //定义一个集合来存储每一次操作时的命令对象  \n    private ArrayList<Command> commands = new ArrayList<Command>();  \n    private Command command;   \n  \n    //注入具体命令对象  \n    public void setCommand(Command command) {  \n        this.command = command;  \n    }  \n      \n    //执行配置文件修改命令，同时将命令对象添加到命令集合中  \n    public void call(String args) {  \n        command.execute(args);  \n        commands.add(command);  \n    }  \n      \n    //记录请求日志，生成日志文件，将命令集合写入日志文件  \n    public void save() {  \n        FileUtil.writeCommands(commands);  \n    }  \n      \n    //从日志文件中提取命令集合，并循环调用每一个命令对象的execute()方法来实现配置文件的重新设置  \n    public void recover() {  \n        ArrayList list;  \n        list = FileUtil.readCommands();  \n          \n        for (Object obj : list) {  \n            ((Command)obj).execute();  \n        }  \n    }  \n}  \n  \n//工具类：文件操作类  \nclass FileUtil {  \n    //将命令集合写入日志文件  \n    public static void writeCommands(ArrayList commands) {  \n        try {  \n            FileOutputStream file = new FileOutputStream("config.log");  \n            //创建对象输出流用于将对象写入到文件中  \n            ObjectOutputStream objout = new ObjectOutputStream(new BufferedOutputStream(file));  \n            //将对象写入文件  \n            objout.writeObject(commands);  \n            objout.close();  \n            }  \n        catch(Exception e) {  \n                System.out.println("命令保存失败！");    \n                e.printStackTrace();  \n            }  \n    }  \n      \n    //从日志文件中提取命令集合  \n    public static ArrayList readCommands() {  \n        try {  \n            FileInputStream file = new FileInputStream("config.log");  \n            //创建对象输入流用于从文件中读取对象  \n            ObjectInputStream objin = new ObjectInputStream(new BufferedInputStream(file));  \n              \n            //将文件中的对象读出并转换为ArrayList类型  \n            ArrayList commands = (ArrayList)objin.readObject();  \n            objin.close();  \n            return commands;  \n            }  \n        catch(Exception e) {  \n                System.out.println("命令读取失败！");  \n                e.printStackTrace();  \n                return null;      \n            }         \n    }  \n}  \n')])])]),e("p",[n._v("编写如下客户端测试代码：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('class Client {  \n    public static void main(String args[]) {  \n        ConfigSettingWindow csw = new ConfigSettingWindow(); //定义请求发送者  \n        Command command; //定义命令对象  \n        ConfigOperator co = new ConfigOperator(); //定义请求接收者  \n          \n        //四次对配置文件的更改  \n        command = new InsertCommand("增加");  \n        command.setConfigOperator(co);  \n        csw.setCommand(command);  \n        csw.call("网站首页");  \n          \n        command = new InsertCommand("增加");  \n        command.setConfigOperator(co);  \n        csw.setCommand(command);  \n        csw.call("端口号");  \n          \n        command = new ModifyCommand("修改");  \n        command.setConfigOperator(co);  \n        csw.setCommand(command);  \n        csw.call("网站首页");  \n          \n        command = new ModifyCommand("修改");  \n        command.setConfigOperator(co);  \n        csw.setCommand(command);          \n        csw.call("端口号");  \n          \n        System.out.println("----------------------------");  \n        System.out.println("保存配置");  \n        csw.save();  \n              \n        System.out.println("----------------------------");   \n        System.out.println("恢复配置");  \n        System.out.println("----------------------------");   \n        csw.recover();    \n    }  \n}  \n')])])]),e("p",[n._v("编译并运行程序，输出结果如下：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("增加新节点：网站首页\n增加新节点：端口号\n修改节点：网站首页\n修改节点：端口号\n----------------------------\n保存配置\n----------------------------\n恢复配置\n----------------------------\n增加新节点：网站首页\n增加新节点：端口号\n修改节点：网站首页\n修改节点：端口号\n")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);