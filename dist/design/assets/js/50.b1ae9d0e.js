(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{396:function(n,t,a){"use strict";a.r(t);var s=a(42),e=Object(s.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"实现对象的复用-享元模式-四"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现对象的复用-享元模式-四"}},[n._v("#")]),n._v(" 实现对象的复用——享元模式（四）")]),n._v(" "),a("p",[n._v("14.5 带外部状态的解决方案")]),n._v(" "),a("p",[n._v("Sunny软件公司开发人员通过对围棋棋子进行进一步分析，发现虽然黑色棋子和白色棋子可以共享，但是它们将显示在棋盘的不同位置，如何让相同的黑子或者白子能够多次重复显示且位于一个棋盘的不同地方？解决方法就是将棋子的位置定义为棋子的一个外部状态，在需要时再进行设置。因此，我们在图14-4中增加了一个新的类Coordinates（坐标类），用于存储每一个棋子的位置，修改之后的结构图如图14-5所示：")]),n._v(" "),a("p",[a("img",{attrs:{src:"http://my.csdn.net/uploads/201206/15/1339772313_4533.jpg",alt:""}})]),n._v(" "),a("p",[n._v("图14-5 引入外部状态之后的围棋棋子结构图")]),n._v(" "),a("p",[n._v("在图14-5中，除了增加一个坐标类Coordinates以外，抽象享元类IgoChessman中的display()方法也将对应增加一个Coordinates类型的参数，用于在显示棋子时指定其坐标，Coordinates类和修改之后的IgoChessman类的代码如下所示：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('//坐标类：外部状态类  \nclass Coordinates {  \n    private int x;  \n    private int y;  \n      \n    public Coordinates(int x,int y) {  \n        this.x = x;  \n        this.y = y;  \n    }  \n      \n    public int getX() {  \n        return this.x;  \n    }  \n      \n    public void setX(int x) {  \n        this.x = x;  \n    }  \n      \n    public int getY() {  \n        return this.y;  \n    }  \n      \n    public void setY(int y) {  \n        this.y = y;  \n    }  \n}   \n  \n//围棋棋子类：抽象享元类  \nabstract class IgoChessman {  \n    public abstract String getColor();  \n      \n    public void display(Coordinates coord){  \n        System.out.println("棋子颜色：" + this.getColor() + "，棋子位置：" + coord.getX() + "，" + coord.getY() );    \n    }  \n}  \n')])])]),a("p",[n._v("客户端测试代码修改如下：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('class Client {  \n    public static void main(String args[]) {  \n        IgoChessman black1,black2,black3,white1,white2;  \n        IgoChessmanFactory factory;  \n          \n        //获取享元工厂对象  \n        factory = IgoChessmanFactory.getInstance();  \n  \n        //通过享元工厂获取三颗黑子  \n        black1 = factory.getIgoChessman("b");  \n        black2 = factory.getIgoChessman("b");  \n        black3 = factory.getIgoChessman("b");  \n        System.out.println("判断两颗黑子是否相同：" + (black1==black2));  \n  \n        //通过享元工厂获取两颗白子  \n        white1 = factory.getIgoChessman("w");  \n        white2 = factory.getIgoChessman("w");  \n        System.out.println("判断两颗白子是否相同：" + (white1==white2));  \n  \n        //显示棋子，同时设置棋子的坐标位置  \n        black1.display(new Coordinates(1,2));  \n        black2.display(new Coordinates(3,4));  \n        black3.display(new Coordinates(1,3));  \n        white1.display(new Coordinates(2,5));  \n        white2.display(new Coordinates(2,4));  \n    }  \n}  \n')])])]),a("p",[n._v("编译并运行程序，输出结果如下：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("判断两颗黑子是否相同：true\n判断两颗白子是否相同：true\n棋子颜色：黑色，棋子位置：1，2\n棋子颜色：黑色，棋子位置：3，4\n棋子颜色：黑色，棋子位置：1，3\n棋子颜色：白色，棋子位置：2，5\n棋子颜色：白色，棋子位置：2，4\n")])])]),a("p",[n._v("从输出结果可以看到，在每次调用display()方法时，都设置了不同的外部状态——坐标值，因此相同的棋子对象虽然具有相同的颜色，但是它们的坐标值不同，将显示在棋盘的不同位置。")])])}),[],!1,null,null,null);t.default=e.exports}}]);