(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{416:function(n,t,e){"use strict";e.r(t);var i=e(42),o=Object(i.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"工厂三兄弟之抽象工厂模式-四"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工厂三兄弟之抽象工厂模式-四"}},[n._v("#")]),n._v(" 工厂三兄弟之抽象工厂模式（四）")]),n._v(" "),e("p",[n._v("4 完整解决方案")]),n._v(" "),e("p",[n._v("Sunny公司开发人员使用抽象工厂模式来重构界面皮肤库的设计，其基本结构如图6所示：")]),n._v(" "),e("p",[e("img",{attrs:{src:"http://img.blog.csdn.net/20130713164620203?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTG92ZUxpb24=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",alt:""}})]),n._v(" "),e("p",[n._v("图6 界面皮肤库结构图")]),n._v(" "),e("p",[n._v("在图6中，SkinFactory接口充当抽象工厂，其子类SpringSkinFactory和SummerSkinFactory充当具体工厂，接口Button、TextField和ComboBox充当抽象产品，其子类SpringButton、SpringTextField、SpringComboBox和SummerButton、SummerTextField、SummerComboBox充当具体产品。完整代码如下所示：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//在本实例中我们对代码进行了大量简化，实际使用时，界面组件的初始化代码较为复杂，还需要使用JDK中一些已有类，为了突出核心代码，在此只提供框架代码和演示输出。  \n//按钮接口：抽象产品  \ninterface Button {  \n    public void display();  \n}  \n  \n//Spring按钮类：具体产品  \nclass SpringButton implements Button {  \n    public void display() {  \n        System.out.println("显示浅绿色按钮。");  \n    }  \n}  \n  \n//Summer按钮类：具体产品  \nclass SummerButton implements Button {  \n    public void display() {  \n        System.out.println("显示浅蓝色按钮。");  \n    }     \n}  \n  \n//文本框接口：抽象产品  \ninterface TextField {  \n    public void display();  \n}  \n  \n//Spring文本框类：具体产品  \nclass SpringTextField implements TextField {  \n    public void display() {  \n        System.out.println("显示绿色边框文本框。");  \n    }  \n}  \n  \n//Summer文本框类：具体产品  \nclass SummerTextField implements TextField {  \n    public void display() {  \n        System.out.println("显示蓝色边框文本框。");  \n    }     \n}  \n  \n//组合框接口：抽象产品  \ninterface ComboBox {  \n    public void display();  \n}  \n  \n//Spring组合框类：具体产品  \nclass SpringComboBox implements ComboBox {  \n    public void display() {  \n        System.out.println("显示绿色边框组合框。");  \n    }  \n}  \n  \n//Summer组合框类：具体产品  \nclass SummerComboBox implements ComboBox {  \n    public void display() {  \n        System.out.println("显示蓝色边框组合框。");  \n    }     \n}  \n  \n//界面皮肤工厂接口：抽象工厂  \ninterface SkinFactory {  \n    public Button createButton();  \n    public TextField createTextField();  \n    public ComboBox createComboBox();  \n}  \n  \n//Spring皮肤工厂：具体工厂  \nclass SpringSkinFactory implements SkinFactory {  \n    public Button createButton() {  \n        return new SpringButton();  \n    }  \n  \n    public TextField createTextField() {  \n        return new SpringTextField();  \n    }  \n  \n    public ComboBox createComboBox() {  \n        return new SpringComboBox();  \n    }  \n}  \n  \n//Summer皮肤工厂：具体工厂  \nclass SummerSkinFactory implements SkinFactory {  \n    public Button createButton() {  \n        return new SummerButton();  \n    }  \n  \n    public TextField createTextField() {  \n        return new SummerTextField();  \n    }  \n  \n    public ComboBox createComboBox() {  \n        return new SummerComboBox();  \n    }  \n}  \n')])])]),e("p",[n._v("为了让系统具备良好的灵活性和可扩展性，我们引入了工具类XMLUtil和配置文件，其中，XMLUtil类的代码如下所示：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('import javax.xml.parsers.*;  \nimport org.w3c.dom.*;  \nimport org.xml.sax.SAXException;  \nimport java.io.*;  \n  \npublic class XMLUtil {  \n//该方法用于从XML配置文件中提取具体类类名，并返回一个实例对象  \n    public static Object getBean() {  \n        try {  \n            //创建文档对象  \n            DocumentBuilderFactory dFactory = DocumentBuilderFactory.newInstance();  \n            DocumentBuilder builder = dFactory.newDocumentBuilder();  \n            Document doc;                             \n            doc = builder.parse(new File("config.xml"));   \n          \n            //获取包含类名的文本节点  \n            NodeList nl = doc.getElementsByTagName("className");  \n            Node classNode=nl.item(0).getFirstChild();  \n            String cName=classNode.getNodeValue();  \n              \n            //通过类名生成实例对象并将其返回  \n            Class c=Class.forName(cName);  \n            Object obj=c.newInstance();  \n            return obj;  \n        }     \n        catch(Exception e) {  \n            e.printStackTrace();  \n            return null;  \n        }  \n    }  \n}  \n')])])]),e("p",[n._v("配置文件config.xml中存储了具体工厂类的类名，代码如下所示：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<?xml version="1.0"?>  \n<config>  \n    <className>SpringSkinFactory</className>  \n</config>  \n       编写如下客户端测试代码：\n[java] view plain copy\nclass Client {  \n    public static void main(String args[]) {  \n        //使用抽象层定义  \n        SkinFactory factory;  \n        Button bt;  \n        TextField tf;  \n        ComboBox cb;  \n        factory = (SkinFactory)XMLUtil.getBean();  \n        bt = factory.createButton();  \n        tf = factory.createTextField();  \n        cb = factory.createComboBox();  \n        bt.display();  \n        tf.display();  \n        cb.display();  \n    }  \n}  \n')])])]),e("p",[n._v("编译并运行程序，输出结果如下：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("显示浅绿色按钮。\n显示绿色边框文本框。\n显示绿色边框组合框。\n")])])]),e("p",[n._v("如果需要更换皮肤，只需修改配置文件即可，在实际环境中，我们可以提供可视化界面，例如菜单或者窗口来修改配置文件，用户无须直接修改配置文件。如果需要增加新的皮肤，只需增加一族新的具体组件并对应提供一个新的具体工厂，修改配置文件即可使用新的皮肤，原有代码无须修改，符合“开闭原则”。")]),n._v(" "),e("p",[n._v("扩展")]),n._v(" "),e("blockquote",[e("p",[n._v("在真实项目开发中，我们通常会为配置文件提供一个可视化的编辑界面，类似Struts框架中的struts.xml编辑器，大家可以自行开发一个简单的图形化工具来修改配置文件，实现真正的纯界面操作。")])])])}),[],!1,null,null,null);t.default=o.exports}}]);