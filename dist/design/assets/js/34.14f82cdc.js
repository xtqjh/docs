(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{380:function(t,e,a){"use strict";a.r(e);var n=a(42),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"处理对象的多种状态及其相互转换-状态模式-二"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理对象的多种状态及其相互转换-状态模式-二"}},[t._v("#")]),t._v(" 处理对象的多种状态及其相互转换——状态模式（二）")]),t._v(" "),a("p",[t._v("2 状态模式概述")]),t._v(" "),a("p",[t._v("状态模式用于解决系统中复杂对象的状态转换以及不同状态下行为的封装问题。当系统中某个对象存在多个状态，这些状态之间可以进行转换，而且对象在不同状态下行为不相同时可以使用状态模式。状态模式将一个对象的状态从该对象中分离出来，封装到专门的状态类中，使得对象状态可以灵活变化，对于客户端而言，无须关心对象状态的转换以及对象所处的当前状态，无论对于何种状态的对象，客户端都可以一致处理。")]),t._v(" "),a("p",[t._v("状态模式定义如下：")]),t._v(" "),a("p",[t._v("状态模式(State Pattern)：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。其别名为状态对象(Objects for States)，状态模式是一种对象行为型模式。")]),t._v(" "),a("p",[t._v("在状态模式中引入了抽象状态类和具体状态类，它们是状态模式的核心，其结构如图3所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.my.csdn.net/uploads/201301/20/1358693242_5100.jpg",alt:""}})]),t._v(" "),a("p",[t._v("图3 状态模式结构图")]),t._v(" "),a("p",[t._v("在状态模式结构图中包含如下几个角色：")]),t._v(" "),a("p",[t._v("● Context（环境类）：环境类又称为上下文类，它是拥有多种状态的对象。由于环境类的状态存在多样性且在不同状态下对象的行为有所不同，因此将状态独立出去形成单独的状态类。在环境类中维护一个抽象状态类State的实例，这个实例定义当前状态，在具体实现时，它是一个State子类的对象。")]),t._v(" "),a("p",[t._v("● State（抽象状态类）：它用于定义一个接口以封装与环境类的一个特定状态相关的行为，在抽象状态类中声明了各种不同状态对应的方法，而在其子类中实现类这些方法，由于不同状态下对象的行为可能不同，因此在不同子类中方法的实现可能存在不同，相同的方法可以写在抽象状态类中。")]),t._v(" "),a("p",[t._v("● ConcreteState（具体状态类）：它是抽象状态类的子类，每一个子类实现一个与环境类的一个状态相关的行为，每一个具体状态类对应环境的一个具体状态，不同的具体状态类其行为有所不同。")]),t._v(" "),a("p",[t._v("在状态模式中，我们将对象在不同状态下的行为封装到不同的状态类中，为了让系统具有更好的灵活性和可扩展性，同时对各状态下的共有行为进行封装，我们需要对状态进行抽象，引入了抽象状态类角色，其典型代码如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("abstract class State {  \n    //声明抽象业务方法，不同的具体状态类可以不同的实现  \n    public abstract void handle();  \n}  \n")])])]),a("p",[t._v("在抽象状态类的子类即具体状态类中实现了在抽象状态类中声明的业务方法，不同的具体状态类可以提供完全不同的方法实现，在实际使用时，在一个状态类中可能包含多个业务方法，如果在具体状态类中某些业务方法的实现完全相同，可以将这些方法移至抽象状态类，实现代码的复用，典型的具体状态类代码如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class ConcreteState extends State {  \n    public void handle() {  \n        //方法具体实现代码  \n    }  \n}  \n")])])]),a("p",[t._v("环境类维持一个对抽象状态类的引用，通过setState()方法可以向环境类注入不同的状态对象，再在环境类的业务方法中调用状态对象的方法，典型代码如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class Context {  \n    private State state; //维持一个对抽象状态对象的引用  \n    private int value; //其他属性值，该属性值的变化可能会导致对象状态发生变化  \n  \n    //设置状态对象  \n    public void setState(State state) {  \n        this.state = state;  \n    }  \n  \n    public void request() {  \n        //其他代码  \n        state.handle(); //调用状态对象的业务方法  \n        //其他代码  \n    }  \n}  \n")])])]),a("p",[t._v("环境类实际上是真正拥有状态的对象，我们只是将环境类中与状态有关的代码提取出来封装到专门的状态类中。在状态模式结构图中，环境类Context与抽象状态类State之间存在单向关联关系，在Context中定义了一个State对象。在实际使用时，它们之间可能存在更为复杂的关系，State与Context之间可能也存在依赖或者关联关系。")]),t._v(" "),a("p",[t._v("在状态模式的使用过程中，一个对象的状态之间还可以进行相互转换，通常有两种实现状态转换的方式：")]),t._v(" "),a("p",[t._v("(1) 统一由环境类来负责状态之间的转换，此时，环境类还充当了状态管理器(State Manager)角色，在环境类的业务方法中通过对某些属性值的判断实现状态转换，还可以提供一个专门的方法用于实现属性判断和状态转换，如下代码片段所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("……  \n     public void changeState() {  \n    //判断属性值，根据属性值进行状态转换  \n     if (value == 0) {  \n        this.setState(new ConcreteStateA());  \n    }  \n    else if (value == 1) {  \n        this.setState(new ConcreteStateB());  \n    }  \n       ......  \n}  \n   ……  \n")])])]),a("p",[t._v("(2) 由具体状态类来负责状态之间的转换，可以在具体状态类的业务方法中判断环境类的某些属性值再根据情况为环境类设置新的状态对象，实现状态转换，同样，也可以提供一个专门的方法来负责属性值的判断和状态转换。此时，状态类与环境类之间就将存在依赖或关联关系，因为状态类需要访问环境类中的属性值，如下代码片段所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("……  \n     public void changeState(Context ctx) {  \n    //根据环境对象中的属性值进行状态转换  \n     if (ctx.getValue() == 1) {  \n        ctx.setState(new ConcreteStateB());  \n    }  \n    else if (ctx.getValue() == 2) {  \n        ctx.setState(new ConcreteStateC());  \n    }  \n       ......  \n}  \n   ……  \n \n")])])]),a("p",[t._v("思考")]),t._v(" "),a("blockquote",[a("p",[t._v("理解两种状态转换方式的异同？")])])])}),[],!1,null,null,null);e.default=s.exports}}]);