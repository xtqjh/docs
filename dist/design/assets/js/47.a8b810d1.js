(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{393:function(n,t,a){"use strict";a.r(t);var s=a(42),e=Object(s.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"实现对象的复用-享元模式-三"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现对象的复用-享元模式-三"}},[n._v("#")]),n._v(" 实现对象的复用——享元模式（三）")]),n._v(" "),a("p",[n._v("14.3 完整解决方案")]),n._v(" "),a("p",[n._v("为了节约存储空间，提高系统性能，Sunny公司开发人员使用享元模式来设计围棋软件中的棋子，其基本结构如图14-4所示：")]),n._v(" "),a("p",[a("img",{attrs:{src:"http://my.csdn.net/uploads/201206/15/1339771744_6390.jpg",alt:""}})]),n._v(" "),a("p",[n._v("图14-4 围棋棋子结构图")]),n._v(" "),a("p",[n._v("在图14-4中，IgoChessman充当抽象享元类，BlackIgoChessman和WhiteIgoChessman充当具体享元类，IgoChessmanFactory充当享元工厂类。完整代码如下所示：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('import java.util.*;  \n  \n//围棋棋子类：抽象享元类  \nabstract class IgoChessman {  \n    public abstract String getColor();  \n  \n    public void display() {  \n        System.out.println("棋子颜色：" + this.getColor());    \n    }  \n}  \n  \n//黑色棋子类：具体享元类  \nclass BlackIgoChessman extends IgoChessman {  \n    public String getColor() {  \n        return "黑色";  \n    }     \n}  \n  \n//白色棋子类：具体享元类  \nclass WhiteIgoChessman extends IgoChessman {  \n    public String getColor() {  \n        return "白色";  \n    }  \n}  \n  \n//围棋棋子工厂类：享元工厂类，使用单例模式进行设计  \nclass IgoChessmanFactory {  \n    private static IgoChessmanFactory instance = new IgoChessmanFactory();  \n    private static Hashtable ht; //使用Hashtable来存储享元对象，充当享元池  \n      \n    private IgoChessmanFactory() {  \n        ht = new Hashtable();  \n        IgoChessman black,white;  \n        black = new BlackIgoChessman();  \n        ht.put("b",black);  \n        white = new WhiteIgoChessman();  \n        ht.put("w",white);  \n    }  \n      \n    //返回享元工厂类的唯一实例  \n    public static IgoChessmanFactory getInstance() {  \n        return instance;  \n    }  \n      \n    //通过key来获取存储在Hashtable中的享元对象  \n    public static IgoChessman getIgoChessman(String color) {  \n        return (IgoChessman)ht.get(color);    \n    }  \n} \n')])])]),a("p",[n._v("编写如下客户端测试代码：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('class Client {  \n    public static void main(String args[]) {  \n        IgoChessman black1,black2,black3,white1,white2;  \n        IgoChessmanFactory factory;  \n          \n        //获取享元工厂对象  \n        factory = IgoChessmanFactory.getInstance();  \n  \n        //通过享元工厂获取三颗黑子  \n        black1 = factory.getIgoChessman("b");  \n        black2 = factory.getIgoChessman("b");  \n        black3 = factory.getIgoChessman("b");  \n        System.out.println("判断两颗黑子是否相同：" + (black1==black2));  \n  \n        //通过享元工厂获取两颗白子  \n        white1 = factory.getIgoChessman("w");  \n        white2 = factory.getIgoChessman("w");  \n        System.out.println("判断两颗白子是否相同：" + (white1==white2));  \n  \n        //显示棋子  \n        black1.display();  \n        black2.display();  \n        black3.display();  \n        white1.display();  \n        white2.display();  \n    }  \n}  \n')])])]),a("p",[n._v("编译并运行程序，输出结果如下：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("判断两颗黑子是否相同：true\n判断两颗白子是否相同：true\n棋子颜色：黑色\n棋子颜色：黑色\n棋子颜色：黑色\n棋子颜色：白色\n棋子颜色：白色\n")])])]),a("p",[n._v("从输出结果可以看出，虽然我们获取了三个黑子对象和两个白子对象，但是它们的内存地址相同，也就是说，它们实际上是同一个对象。在实现享元工厂类时我们使用了单例模式和简单工厂模式，确保了享元工厂对象的唯一性，并提供工厂方法来向客户端返回享元对象。")])])}),[],!1,null,null,null);t.default=e.exports}}]);