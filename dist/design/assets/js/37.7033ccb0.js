(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{383:function(t,n,a){"use strict";a.r(n);var e=a(42),s=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"处理对象的多种状态及其相互转换-状态模式-四"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理对象的多种状态及其相互转换-状态模式-四"}},[t._v("#")]),t._v(" 处理对象的多种状态及其相互转换——状态模式（四）")]),t._v(" "),a("p",[t._v("4 共享状态")]),t._v(" "),a("p",[t._v("在有些情况下，多个环境对象可能需要共享同一个状态，如果希望在系统中实现多个环境对象共享一个或多个状态对象，那么需要将这些状态对象定义为环境类的静态成员对象。")]),t._v(" "),a("p",[t._v("下面通过一个简单实例来说明如何实现共享状态：")]),t._v(" "),a("p",[t._v("如果某系统要求两个开关对象要么都处于开的状态，要么都处于关的状态，在使用时它们的状态必须保持一致，开关可以由开转换到关，也可以由关转换到开。")]),t._v(" "),a("p",[t._v("可以使用状态模式来实现开关的设计，其结构如图5所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.my.csdn.net/uploads/201301/20/1358694073_2885.jpg",alt:""}})]),t._v(" "),a("p",[t._v("图5 开关及其状态设计结构图")]),t._v(" "),a("p",[t._v("开关类Switch代码如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('class Switch {  \n    private static State state,onState,offState; //定义三个静态的状态对象  \n    private String name;  \n      \n    public Switch(String name) {  \n        this.name = name;  \n        onState = new OnState();  \n        offState = new OffState();  \n        this.state = onState;  \n    }  \n  \n    public void setState(State state) {  \n        this.state = state;  \n    }  \n  \n    public static State getState(String type) {  \n        if (type.equalsIgnoreCase("on")) {  \n            return onState;  \n        }  \n        else {  \n            return offState;  \n        }  \n    }  \n          \n    //打开开关  \n    public void on() {  \n        System.out.print(name);  \n        state.on(this);  \n    }  \n      \n//关闭开关  \n    public void off() {  \n        System.out.print(name);  \n        state.off(this);  \n    }  \n}  \n')])])]),a("p",[t._v("抽象状态类如下代码所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("abstract class State {  \n    public abstract void on(Switch s);  \n    public abstract void off(Switch s);  \n}  \n")])])]),a("p",[t._v("两个具体状态类如下代码所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//打开状态  \nclass OnState extends State {  \n    public void on(Switch s) {  \n        System.out.println("已经打开！");  \n    }  \n      \n    public void off(Switch s) {  \n        System.out.println("关闭！");  \n        s.setState(Switch.getState("off"));  \n    }  \n}  \n  \n//关闭状态  \nclass OffState extends State {  \n    public void on(Switch s) {  \n        System.out.println("打开！");  \n        s.setState(Switch.getState("on"));  \n    }  \n      \n    public void off(Switch s) {  \n        System.out.println("已经关闭！");  \n    }  \n}  \n')])])]),a("p",[t._v("编写如下客户端代码进行测试：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('class Client {  \n    public static void main(String args[]) {  \n        Switch s1,s2;  \n        s1=new Switch("开关1");  \n        s2=new Switch("开关2");  \n          \n        s1.on();  \n        s2.on();  \n        s1.off();  \n        s2.off();  \n        s2.on();  \n        s1.on();      \n    }  \n}  \n')])])]),a("p",[t._v("输出结果如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("开关1已经打开！\n开关2已经打开！\n开关1关闭！\n开关2已经关闭！\n开关2打开！\n开关1已经打开！\n")])])]),a("p",[t._v("从输出结果可以得知两个开关共享相同的状态，如果第一个开关关闭，则第二个开关也将关闭，再次关闭时将输出“已经关闭”；打开时也将得到类似结果。")])])}),[],!1,null,null,null);n.default=s.exports}}]);