(window.webpackJsonp=window.webpackJsonp||[]).push([[166],{512:function(t,_,v){"use strict";v.r(_);var e=v(42),p=Object(e.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"面向对象设计原则之迪米特法则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面向对象设计原则之迪米特法则"}},[t._v("#")]),t._v(" 面向对象设计原则之迪米特法则")]),t._v(" "),v("p",[t._v("迪米特法则来自于1987年美国东北大学(Northeastern University)一个名为“Demeter”的研究项目。迪米特法则又称为最少知识原则(LeastKnowledge Principle, LKP)，其定义如下：")]),t._v(" "),v("blockquote",[v("p",[t._v("迪米特法则(Law of  Demeter, LoD)：一个软件实体应当尽可能少地与其他实体发生相互作用。")])]),t._v(" "),v("p",[t._v("如果一个系统符合迪米特法则，那么当其中某一个模块发生修改时，就会尽量少地影响其他模块，扩展会相对容易，这是对软件实体之间通信的限制，迪米特法则要求限制软件实体之间通信的宽度和深度。迪米特法则可降低系统的耦合度，使类与类之间保持松散的耦合关系。")]),t._v(" "),v("p",[t._v("迪米特法则还有几种定义形式，包括：不要和“陌生人”说话、只与你的直接朋友通信等，在迪米特法则中，对于一个对象，其朋友包括以下几类：")]),t._v(" "),v("p",[t._v("(1) 当前对象本身(this)；")]),t._v(" "),v("p",[t._v("(2) 以参数形式传入到当前对象方法中的对象；")]),t._v(" "),v("p",[t._v("(3) 当前对象的成员对象；")]),t._v(" "),v("p",[t._v("(4) 如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友；")]),t._v(" "),v("p",[t._v("(5) 当前对象所创建的对象。")]),t._v(" "),v("p",[t._v("任何一个对象，如果满足上面的条件之一，就是当前对象的“朋友”，否则就是“陌生人”。在应用迪米特法则时，一个对象只能与直接朋友发生交互，不要与“陌生人”发生直接交互，这样做可以降低系统的耦合度，一个对象的改变不会给太多其他对象带来影响。")]),t._v(" "),v("p",[t._v("迪米特法则要求我们在设计系统时，应该尽量减少对象之间的交互，如果两个对象之间不必彼此直接通信，那么这两个对象就不应当发生任何直接的相互作用，如果其中的一个对象需要调用另一个对象的某一个方法的话，可以通过第三者转发这个调用。简言之，就是通过引入一个合理的第三者来降低现有对象之间的耦合度。")]),t._v(" "),v("p",[t._v("在将迪米特法则运用到系统设计中时，要注意下面的几点：在类的划分上，应当尽量创建松耦合的类，类之间的耦合度越低，就越有利于复用，一个处在松耦合中的类一旦被修改，不会对关联的类造成太大波及；在类的结构设计上，每一个类都应当尽量降低其成员变量和成员函数的访问权限；在类的设计上，只要有可能，一个类型应当设计成不变类；在对其他类的引用上，一个对象对其他对象的引用应当降到最低。")]),t._v(" "),v("p",[t._v("下面通过一个简单实例来加深对迪米特法则的理解：")]),t._v(" "),v("p",[t._v("Sunny软件公司所开发CRM系统包含很多业务操作窗口，在这些窗口中，某些界面控件之间存在复杂的交互关系，一个控件事件的触发将导致多个其他界面控件产生响应，例如，当一个按钮(Button)被单击时，对应的列表框(List)、组合框(ComboBox)、文本框(TextBox)、文本标签(Label)等都将发生改变，在初始设计方案中，界面控件之间的交互关系可简化为如图1所示结构：")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://my.csdn.net/uploads/201205/14/1336930654_2743.jpg",alt:""}})]),t._v(" "),v("p",[t._v("图1 初始设计方案结构图")]),t._v(" "),v("p",[t._v("在图1中，由于界面控件之间的交互关系复杂，导致在该窗口中增加新的界面控件时需要修改与之交互的其他控件的源代码，系统扩展性较差，也不便于增加和删除新控件。")]),t._v(" "),v("p",[t._v("现使用迪米特对其进行重构。")]),t._v(" "),v("p",[t._v("在本实例中，可以通过引入一个专门用于控制界面控件交互的中间类(Mediator)来降低界面控件之间的耦合度。引入中间类之后，界面控件之间不再发生直接引用，而是将请求先转发给中间类，再由中间类来完成对其他控件的调用。当需要增加或删除新的控件时，只需修改中间类即可，无须修改新增控件或已有控件的源代码，重构后结构如图2所示：")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://my.csdn.net/uploads/201205/14/1336930673_6550.jpg",alt:""}})]),t._v(" "),v("p",[t._v("图2  重构后的结构图")])])}),[],!1,null,null,null);_.default=p.exports}}]);