(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{433:function(e,n,t){"use strict";t.r(n);var a=t(42),i=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"操作复杂对象结构-访问者模式-三"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作复杂对象结构-访问者模式-三"}},[e._v("#")]),e._v(" 操作复杂对象结构——访问者模式（三）")]),e._v(" "),t("p",[e._v("26.3 完整解决方案")]),e._v(" "),t("p",[e._v("Sunny软件公司开发人员使用访问者模式对OA系统中员工数据汇总模块进行重构，使得系统可以很方便地增加新类型的访问者，更加符合“单一职责原则”和“开闭原则”，重构后的基本结构如图26-3所示：")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://my.csdn.net/uploads/201204/06/1333714391_6314.gif",alt:""}})]),e._v(" "),t("p",[e._v("在图26-3中，FADepartment表示财务部，HRDepartment表示人力资源部，它们充当具体访问者角色，其抽象父类Department充当抽象访问者角色；EmployeeList充当对象结构，用于存储员工列表；FulltimeEmployee表示正式员工，ParttimeEmployee表示临时工，它们充当具体元素角色，其父接口Employee充当抽象元素角色。完整代码如下所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import java.util.*;  \n  \n//员工类：抽象元素类  \ninterface Employee  \n{  \n    public void accept(Department handler); //接受一个抽象访问者访问  \n}  \n  \n//全职员工类：具体元素类  \nclass FulltimeEmployee implements Employee  \n{  \n    private String name;  \n    private double weeklyWage;  \n    private int workTime;  \n  \n    public FulltimeEmployee(String name,double weeklyWage,int workTime)  \n    {  \n        this.name = name;  \n        this.weeklyWage = weeklyWage;  \n        this.workTime = workTime;  \n    }     \n  \n    public void setName(String name)   \n    {  \n        this.name = name;   \n    }  \n  \n    public void setWeeklyWage(double weeklyWage)   \n    {  \n        this.weeklyWage = weeklyWage;   \n    }  \n  \n    public void setWorkTime(int workTime)   \n    {  \n        this.workTime = workTime;   \n    }  \n  \n    public String getName()   \n    {  \n        return (this.name);   \n    }  \n  \n    public double getWeeklyWage()   \n    {  \n        return (this.weeklyWage);   \n    }  \n  \n    public int getWorkTime()   \n    {  \n        return (this.workTime);   \n    }  \n  \n    public void accept(Department handler)  \n    {  \n        handler.visit(this); //调用访问者的访问方法  \n    }  \n}  \n  \n//兼职员工类：具体元素类  \nclass ParttimeEmployee implements Employee  \n{  \n    private String name;  \n    private double hourWage;  \n    private int workTime;  \n  \n    public ParttimeEmployee(String name,double hourWage,int workTime)  \n    {  \n        this.name = name;  \n        this.hourWage = hourWage;  \n        this.workTime = workTime;  \n    }     \n  \n    public void setName(String name)   \n    {  \n        this.name = name;   \n    }  \n  \n    public void setHourWage(double hourWage)   \n    {  \n        this.hourWage = hourWage;   \n    }  \n  \n    public void setWorkTime(int workTime)   \n    {  \n        this.workTime = workTime;   \n    }  \n  \n    public String getName()   \n    {  \n        return (this.name);   \n    }  \n  \n    public double getHourWage()   \n    {  \n        return (this.hourWage);   \n    }  \n  \n    public int getWorkTime()   \n    {  \n        return (this.workTime);   \n    }  \n  \n    public void accept(Department handler)  \n    {  \n        handler.visit(this); //调用访问者的访问方法  \n    }  \n}  \n  \n//部门类：抽象访问者类  \nabstract class Department  \n{  \n    //声明一组重载的访问方法，用于访问不同类型的具体元素  \n    public abstract void visit(FulltimeEmployee employee);  \n    public abstract void visit(ParttimeEmployee employee);    \n}  \n  \n//财务部类：具体访问者类  \nclass FADepartment extends Department  \n{  \n    //实现财务部对全职员工的访问  \n    public void visit(FulltimeEmployee employee)  \n    {  \n        int workTime = employee.getWorkTime();  \n        double weekWage = employee.getWeeklyWage();  \n        if(workTime > 40)  \n        {  \n            weekWage = weekWage + (workTime - 40) * 100;  \n        }  \n        else if(workTime < 40)  \n        {  \n            weekWage = weekWage - (40 - workTime) * 80;  \n            if(weekWage < 0)  \n            {  \n                weekWage = 0;  \n            }  \n        }  \n        System.out.println("正式员工" + employee.getName() + "实际工资为：" + weekWage + "元。");             \n    }  \n  \n    //实现财务部对兼职员工的访问  \n    public void visit(ParttimeEmployee employee)  \n    {  \n        int workTime = employee.getWorkTime();  \n        double hourWage = employee.getHourWage();  \n        System.out.println("临时工" + employee.getName() + "实际工资为：" + workTime * hourWage + "元。");       \n    }         \n}  \n  \n//人力资源部类：具体访问者类  \nclass HRDepartment extends Department  \n{  \n    //实现人力资源部对全职员工的访问  \n    public void visit(FulltimeEmployee employee)  \n    {  \n        int workTime = employee.getWorkTime();  \n        System.out.println("正式员工" + employee.getName() + "实际工作时间为：" + workTime + "小时。");  \n        if(workTime > 40)  \n        {  \n            System.out.println("正式员工" + employee.getName() + "加班时间为：" + (workTime - 40) + "小时。");  \n        }  \n        else if(workTime < 40)  \n        {  \n            System.out.println("正式员工" + employee.getName() + "请假时间为：" + (40 - workTime) + "小时。");  \n        }                         \n    }  \n  \n    //实现人力资源部对兼职员工的访问  \n    public void visit(ParttimeEmployee employee)  \n    {  \n        int workTime = employee.getWorkTime();  \n        System.out.println("临时工" + employee.getName() + "实际工作时间为：" + workTime + "小时。");  \n    }         \n}  \n  \n//员工列表类：对象结构  \nclass EmployeeList  \n{  \n    //定义一个集合用于存储员工对象  \n    private ArrayList<Employee> list = new ArrayList<Employee>();  \n  \n    public void addEmployee(Employee employee)  \n    {  \n        list.add(employee);  \n    }  \n  \n    //遍历访问员工集合中的每一个员工对象  \n    public void accept(Department handler)  \n    {  \n        for(Object obj : list)  \n        {  \n            ((Employee)obj).accept(handler);  \n        }  \n    }  \n}  \n')])])]),t("p",[e._v("为了提高系统的灵活性和可扩展性，我们将具体访问者类的类名存储在配置文件中，并通过工具类XMLUtil来读取配置文件并反射生成对象，XMLUtil类的代码如下所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import javax.xml.parsers.*;  \nimport org.w3c.dom.*;  \nimport org.xml.sax.SAXException;  \nimport java.io.*;  \nclass XMLUtil  \n{  \n    //该方法用于从XML配置文件中提取具体类类名，并返回一个实例对象  \n    public static Object getBean()  \n    {  \n        try  \n        {  \n            //创建文档对象  \n            DocumentBuilderFactory dFactory = DocumentBuilderFactory.newInstance();  \n            DocumentBuilder builder = dFactory.newDocumentBuilder();  \n            Document doc;                             \n            doc = builder.parse(new File("config.xml"));   \n          \n            //获取包含类名的文本节点  \n            NodeList nl = doc.getElementsByTagName("className");  \n            Node classNode=nl.item(0).getFirstChild();  \n            String cName=classNode.getNodeValue();  \n              \n            //通过类名生成实例对象并将其返回  \n            Class c=Class.forName(cName);  \n            Object obj=c.newInstance();  \n            return obj;  \n        }     \n        catch(Exception e)  \n        {  \n            e.printStackTrace();  \n            return null;  \n        }  \n    }  \n}  \n')])])]),t("p",[e._v("配置文件config.xml中存储了具体访问者类的类名，代码如下所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<?xml version="1.0"?>  \n<config>  \n    <className>FADepartment</className>  \n</config>  \n')])])]),t("p",[e._v("编写如下客户端测试代码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('class Client  \n{  \n    public static void main(String args[])  \n    {  \n        EmployeeList list = new EmployeeList();  \n        Employee fte1,fte2,fte3,pte1,pte2;  \n  \n        fte1 = new FulltimeEmployee("张无忌",3200.00,45);  \n        fte2 = new FulltimeEmployee("杨过",2000.00,40);  \n        fte3 = new FulltimeEmployee("段誉",2400.00,38);  \n        pte1 = new ParttimeEmployee("洪七公",80.00,20);  \n        pte2 = new ParttimeEmployee("郭靖",60.00,18);  \n  \n        list.addEmployee(fte1);  \n        list.addEmployee(fte2);  \n        list.addEmployee(fte3);  \n        list.addEmployee(pte1);  \n        list.addEmployee(pte2);  \n  \n        Department dep;  \n        dep = (Department)XMLUtil.getBean();  \n        list.accept(dep);  \n    }  \n}  \n')])])]),t("p",[e._v("编译并运行程序，输出结果如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("正式员工张无忌实际工资为：3700.0元。\n正式员工杨过实际工资为：2000.0元。\n正式员工段誉实际工资为：2240.0元。\n临时工洪七公实际工资为：1600.0元。\n临时工郭靖实际工资为：1080.0元。\n")])])]),t("p",[e._v("如果需要更换具体访问者类，无须修改源代码，只需修改配置文件，例如将访问者类由财务部改为人力资源部，只需将存储在配置文件中的具体访问者类FADepartment改为HRDepartment，如下代码所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<?xml version="1.0"?>  \n<config>  \n    <className>HRDepartment</className>  \n</config>  \n')])])]),t("p",[e._v("重新运行客户端程序，输出结果如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("正式员工张无忌实际工作时间为：45小时。\n正式员工张无忌加班时间为：5小时。\n正式员工杨过实际工作时间为：40小时。\n正式员工段誉实际工作时间为：38小时。\n正式员工段誉请假时间为：2小时。\n临时工洪七公实际工作时间为：20小时。\n临时工郭靖实际工作时间为：18小时。\n")])])]),t("p",[e._v("如果要在系统中增加一种新的访问者，无须修改源代码，只要增加一个新的具体访问者类即可，在该具体访问者中封装了新的操作元素对象的方法。从增加新的访问者的角度来看，访问者模式符合“开闭原则”。")]),e._v(" "),t("p",[e._v("如果要在系统中增加一种新的具体元素，例如增加一种新的员工类型为“退休人员”，由于原有系统并未提供相应的访问接口（在抽象访问者中没有声明任何访问“退休人员”的方法），因此必须对原有系统进行修改，在原有的抽象访问者类和具体访问者类中增加相应的访问方法。从增加新的元素的角度来看，访问者模式违背了“开闭原则”。")]),e._v(" "),t("p",[e._v("综上所述，访问者模式与抽象工厂模式类似，对“开闭原则”的支持具有倾斜性，可以很方便地添加新的访问者，但是添加新的元素较为麻烦。")])])}),[],!1,null,null,null);n.default=i.exports}}]);