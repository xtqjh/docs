(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{400:function(n,t,e){"use strict";e.r(t);var a=e(42),o=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"对象的克隆-原型模式-四"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象的克隆-原型模式-四"}},[n._v("#")]),n._v(" 对象的克隆——原型模式（四）")]),n._v(" "),e("p",[n._v("7.5 原型管理器的引入和实现")]),n._v(" "),e("p",[n._v("原型管理器(Prototype Manager)是将多个原型对象存储在一个集合中供客户端使用，它是一个专门负责克隆对象的工厂，其中定义了一个集合用于存储原型对象，如果需要某个原型对象的一个克隆，可以通过复制集合中对应的原型对象来获得。在原型管理器中针对抽象原型类进行编程，以便扩展。其结构如图7-8所示：")]),n._v(" "),e("p",[e("img",{attrs:{src:"http://my.csdn.net/uploads/201204/03/1333465608_5871.gif",alt:""}})]),n._v(" "),e("p",[n._v("图7-8 带原型管理器的原型模式")]),n._v(" "),e("p",[n._v("下面通过模拟一个简单的公文管理器来介绍原型管理器的设计与实现：\nSunny软件公司在日常办公中有许多公文需要创建、递交和审批，例如《可行性分析报告》、《立项建议书》、《软件需求规格说明书》、《项目进展报告》等，为了提高工作效率，在OA系统中为各类公文均创建了模板，用户可以通过这些模板快速创建新的公文，这些公文模板需要统一进行管理，系统根据用户请求的不同生成不同的新公文。")]),n._v(" "),e("p",[n._v("我们使用带原型管理器的原型模式实现公文管理器的设计，其结构如图7-9所示：")]),n._v(" "),e("p",[e("img",{attrs:{src:"http://my.csdn.net/uploads/201204/03/1333465614_7325.gif",alt:""}})]),n._v(" "),e("p",[n._v("图7-9 公文管理器结构图")]),n._v(" "),e("p",[n._v("以下是实现该功能的一些核心代码，考虑到代码的可读性，我们对所有的类都进行了简化：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('import java.util.*;\n \n//抽象公文接口，也可定义为抽象类，提供clone()方法的实现，将业务方法声明为抽象方法\ninterface OfficialDocument extends  Cloneable\n{\n       public  OfficialDocument clone();\n       public  void display();\n}\n \n//可行性分析报告(Feasibility Analysis Report)类\nclass FAR implements OfficialDocument\n{\n       public  OfficialDocument clone()\n      {\n              OfficialDocument  far = null;\n              try\n              {\n                     far  = (OfficialDocument)super.clone();\n              }\n              catch(CloneNotSupportedException  e)\n              {\n                      System.out.println("不支持复制！");\n              }\n              return  far;\n       }\n      \n       public  void display()\n       {\n              System.out.println("《可行性分析报告》");\n       }\n}\n \n//软件需求规格说明书(Software Requirements Specification)类\nclass SRS implements OfficialDocument\n{\n       public  OfficialDocument clone()\n       {\n              OfficialDocument  srs = null;\n              try\n              {\n                     srs  = (OfficialDocument)super.clone();\n              }\n              catch(CloneNotSupportedException  e)\n              { \n                     System.out.println("不支持复制！");\n              }\n              return  srs;\n       }\n      \n       public  void display()\n       {\n              System.out.println("《软件需求规格说明书》");\n       }\n}\n \n//原型管理器（使用饿汉式单例实现）\nclass  PrototypeManager\n{\n       //定义一个Hashtable，用于存储原型对象\n       private Hashtable ht=new Hashtable();\n       private static PrototypeManager pm =  new PrototypeManager();\n      \n       //为Hashtable增加公文对象   \n     private  PrototypeManager()\n     {\n              ht.put("far",new  FAR());\n              ht.put("srs",new  SRS());               \n     }\n  \n     //增加新的公文对象\n       public void addOfficialDocument(String  key,OfficialDocument doc)\n       {\n              ht.put(key,doc);\n       }\n \n       //通过浅克隆获取新的公文对象\n       public OfficialDocument  getOfficialDocument(String key)\n       {\n              return  ((OfficialDocument)ht.get(key)).clone();\n       }\n      \n       public static PrototypeManager  getPrototypeManager()\n       {\n              return pm;\n       }\n}\n')])])]),e("p",[n._v("客户端代码如下所示：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('class Client\n{\n       public  static void main(String args[])\n       {\n              //获取原型管理器对象\n              PrototypeManager pm =  PrototypeManager.getPrototypeManager();  \n             \n              OfficialDocument  doc1,doc2,doc3,doc4;\n             \n              doc1  = pm.getOfficialDocument("far");\n              doc1.display();\n              doc2  = pm.getOfficialDocument("far");\n              doc2.display();\n              System.out.println(doc1  == doc2);\n             \n              doc3  = pm.getOfficialDocument("srs");\n              doc3.display();\n              doc4  = pm.getOfficialDocument("srs");\n              doc4.display();\n              System.out.println(doc3  == doc4);\n       }\n}\n')])])]),e("p",[n._v("编译并运行程序，输出结果如下：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("《可行性分析报告》\n《可行性分析报告》\nfalse\n《软件需求规格说明书》\n《软件需求规格说明书》\nfalse\n")])])]),e("p",[n._v("在PrototypeManager中定义了一个Hashtable类型的集合对象，使用“键值对”来存储原型对象，客户端可以通过Key（如“far”或“srs”）来获取对应原型对象的克隆对象。PrototypeManager类提供了类似工厂方法的getOfficialDocument()方法用于返回一个克隆对象。在本实例代码中，我们将PrototypeManager设计为单例类，使用饿汉式单例实现，确保系统中有且仅有一个PrototypeManager对象，有利于节省系统资源，并可以更好地对原型管理器对象进行控制。")]),n._v(" "),e("p",[n._v("思考")]),n._v(" "),e("blockquote",[e("p",[n._v("如果需要增加一种新类型的公文，如《项目进展报告》(Project    Progress Report, PPR)，公文管理器系统源代码如何修改，动手实践你的修改方案。")])]),n._v(" "),e("p",[n._v("7.6 原型模式总结")]),n._v(" "),e("p",[n._v("原型模式作为一种快速创建大量相同或相似对象的方式，在软件开发中应用较为广泛，很多软件提供的复制(Ctrl + C)和粘贴(Ctrl + V)操作就是原型模式的典型应用，下面对该模式的使用效果和适用情况进行简单的总结。")]),n._v(" "),e("p",[n._v("1.主要优点")]),n._v(" "),e("p",[n._v("原型模式的主要优点如下：")]),n._v(" "),e("p",[n._v("(1) 当创建新的对象实例较为复杂时，使用原型模式可以简化对象的创建过程，通过复制一个已有实例可以提高新实例的创建效率。")]),n._v(" "),e("p",[n._v("(2) 扩展性较好，由于在原型模式中提供了抽象原型类，在客户端可以针对抽象原型类进行编程，而将具体原型类写在配置文件中，增加或减少产品类对原有系统都没有任何影响。")]),n._v(" "),e("p",[n._v("(3) 原型模式提供了简化的创建结构，工厂方法模式常常需要有一个与产品类等级结构相同的工厂等级结构，而原型模式就不需要这样，原型模式中产品的复制是通过封装在原型类中的克隆方法实现的，无须专门的工厂类来创建产品。")]),n._v(" "),e("p",[n._v("(4) 可以使用深克隆的方式保存对象的状态，使用原型模式将对象复制一份并将其状态保存起来，以便在需要的时候使用（如恢复到某一历史状态），可辅助实现撤销操作。")]),n._v(" "),e("p",[n._v("2.主要缺点")]),n._v(" "),e("p",[n._v("原型模式的主要缺点如下：")]),n._v(" "),e("p",[n._v("(1) 需要为每一个类配备一个克隆方法，而且该克隆方法位于一个类的内部，当对已有的类进行改造时，需要修改源代码，违背了“开闭原则”。")]),n._v(" "),e("p",[n._v("(2) 在实现深克隆时需要编写较为复杂的代码，而且当对象之间存在多重的嵌套引用时，为了实现深克隆，每一层对象对应的类都必须支持深克隆，实现起来可能会比较麻烦。")]),n._v(" "),e("p",[n._v("3.适用场景\n在以下情况下可以考虑使用原型模式：")]),n._v(" "),e("p",[n._v("(1) 创建新对象成本较大（如初始化需要占用较长的时间，占用太多的CPU资源或网络资源），新的对象可以通过原型模式对已有对象进行复制来获得，如果是相似对象，则可以对其成员变量稍作修改。")]),n._v(" "),e("p",[n._v("(2) 如果系统要保存对象的状态，而对象的状态变化很小，或者对象本身占用内存较少时，可以使用原型模式配合备忘录模式来实现。")]),n._v(" "),e("p",[n._v("(3) 需要避免使用分层次的工厂类来创建分层次的对象，并且类的实例对象只有一个或很少的几个组合状态，通过复制原型对象得到新实例可能比使用构造函数创建一个新实例更加方便。")]),n._v(" "),e("p",[n._v("练习")]),n._v(" "),e("blockquote",[e("p",[n._v("设计并实现一个客户类Customer，其中包含一个名为客户地址的成员变量，客户地址的类型为Address，用浅克隆和深克隆分别实现Customer对象的复制并比较这两种克隆方式的异同。")])])])}),[],!1,null,null,null);t.default=o.exports}}]);