(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{480:function(_,v,t){"use strict";t.r(v);var p=t(42),e=Object(p.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"设计模式之代理模式-四"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计模式之代理模式-四"}},[_._v("#")]),_._v(" 设计模式之代理模式（四）")]),_._v(" "),t("p",[_._v("15.7 代理模式效果与适用场景")]),_._v(" "),t("p",[_._v("代理模式是常用的结构型设计模式之一，它为对象的间接访问提供了一个解决方案，可以对对象的访问进行控制。代理模式类型较多，其中远程代理、虚拟代理、保护代理等在软件开发中应用非常广泛。")]),_._v(" "),t("p",[_._v("15.7.1 模式优点")]),_._v(" "),t("p",[_._v("代理模式的共同优点如下：")]),_._v(" "),t("p",[_._v("(1) 能够协调调用者和被调用者，在一定程度上降低了系统的耦合度。")]),_._v(" "),t("p",[_._v("(2) 客户端可以针对抽象主题角色进行编程，增加和更换代理类无须修改源代码，符合开闭原则，系统具有较好的灵活性和可扩展性。")]),_._v(" "),t("p",[_._v("此外，不同类型的代理模式也具有独特的优点，例如：")]),_._v(" "),t("p",[_._v("(1) 远程代理为位于两个不同地址空间对象的访问提供了一种实现机制，可以将一些消耗资源较多的对象和操作移至性能更好的计算机上，提高系统的整体运行效率。")]),_._v(" "),t("p",[_._v("(2) 虚拟代理通过一个消耗资源较少的对象来代表一个消耗资源较多的对象，可以在一定程度上节省系统的运行开销。")]),_._v(" "),t("p",[_._v("(3) 缓冲代理为某一个操作的结果提供临时的缓存存储空间，以便在后续使用中能够共享这些结果，优化系统性能，缩短执行时间。")]),_._v(" "),t("p",[_._v("(4) 保护代理可以控制对一个对象的访问权限，为不同用户提供不同级别的使用权限。")]),_._v(" "),t("p",[_._v("15.7.2 模式缺点")]),_._v(" "),t("p",[_._v("代理模式的主要缺点如下：")]),_._v(" "),t("p",[_._v("(1) 由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢，例如保护代理。")]),_._v(" "),t("p",[_._v("(2) 实现代理模式需要额外的工作，而且有些代理模式的实现过程较为复杂，例如远程代理。")]),_._v(" "),t("p",[_._v("15.7.3 模式适用场景")]),_._v(" "),t("p",[_._v("代理模式的类型较多，不同类型的代理模式有不同的优缺点，它们应用于不同的场合：")]),_._v(" "),t("p",[_._v("(1) 当客户端对象需要访问远程主机中的对象时可以使用远程代理。")]),_._v(" "),t("p",[_._v("(2) 当需要用一个消耗资源较少的对象来代表一个消耗资源较多的对象，从而降低系统开销、缩短运行时间时可以使用虚拟代理，例如一个对象需要很长时间才能完成加载时。")]),_._v(" "),t("p",[_._v("(3) 当需要为某一个被频繁访问的操作结果提供一个临时存储空间，以供多个客户端共享访问这些结果时可以使用缓冲代理。通过使用缓冲代理，系统无须在客户端每一次访问时都重新执行操作，只需直接从临时缓冲区获取操作结果即可。")]),_._v(" "),t("p",[_._v("(4) 当需要控制对一个对象的访问，为不同用户提供不同级别的访问权限时可以使用保护代理。")]),_._v(" "),t("p",[_._v("(5) 当需要为一个对象的访问（引用）提供一些额外的操作时可以使用智能引用代理。")]),_._v(" "),t("p",[_._v("习题")]),_._v(" "),t("ol",[t("li",[_._v("Windows操作系统中的应用程序快捷方式是(    )模式的应用实例。")])]),_._v(" "),t("p",[_._v("A. 代理 (Proxy)            B. 组合 (Composite)")]),_._v(" "),t("p",[_._v("C. 装饰 (Decorator)         D. 外观 (Facade)")]),_._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[_._v("毕业生通过职业介绍所找工作，请问该过程蕴含了哪种设计模式，绘制相应的类图。")])]),_._v(" "),t("li",[t("p",[_._v("在某应用软件中需要记录业务方法的调用日志，在不修改现有业务类的基础上为每一个类提供一个日志记录代理类，在代理类中输出日志，如在业务方法Method()调用之前输出“方法Method()被调用，调用时间为2012-11-5 10:10:10”，调用之后如果没有抛异常则输出“方法Method()调用成功”，否则输出“方法Method()调用失败”。在代理类中调用真实业务类的业务方法，使用代理模式设计该日志记录模块的结构，绘制类图并使用C#语言编程模拟实现。")])]),_._v(" "),t("li",[t("p",[_._v("某软件公司欲开发一款基于C/S的网络图片查看器，具体功能描述如下：用户只需在图片查看器中输入网页URL，程序将自动将该网页所有图片下载到本地，考虑到有些网页图片比较多，而且某些图片文件比较大，因此将先以图标的方式显示图片，不同类型的图片使用不同的图标，并且在图标下面标注该图片的文件名，用户单击图标后可查看真正的图片，界面效果如图15-7所示。试使用虚拟代理模式设计并实现该图片查看器。（注：可以结合多线程机制，使用一个线程显示小图标，同时启动另一个线程在后台加载原图。）")])])]),_._v(" "),t("p",[t("img",{attrs:{src:"http://img.my.csdn.net/uploads/201211/27/1353946970_7279.jpg",alt:""}})]),_._v(" "),t("p",[_._v("图15-7 图片查看器界面效果图")]),_._v(" "),t("p",[_._v("【友情提示：建议大家有时间的话把这些练习都做一做，有问题欢迎讨论！】")])])}),[],!1,null,null,null);v.default=e.exports}}]);