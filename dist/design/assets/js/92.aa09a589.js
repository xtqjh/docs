(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{438:function(n,e,t){"use strict";t.r(e);var l=t(42),i=Object(l.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"树形结构的处理-组合模式-三"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#树形结构的处理-组合模式-三"}},[n._v("#")]),n._v(" 树形结构的处理——组合模式（三）")]),n._v(" "),t("p",[n._v("11.3  完整解决方案")]),n._v(" "),t("p",[n._v("为了让系统具有更好的灵活性和可扩展性，客户端可以一致地对待文件和文件夹，Sunny公司开发人员使用组合模式来进行杀毒软件的框架设计，其基本结构如图11-5所示：")]),n._v(" "),t("p",[t("img",{attrs:{src:"http://img.my.csdn.net/uploads/201209/07/1347030143_6150.jpg",alt:""}})]),n._v(" "),t("p",[n._v("图11-5  杀毒软件框架设计结构图")]),n._v(" "),t("p",[n._v("在图11-5中， AbstractFile充当抽象构件类，Folder充当容器构件类，ImageFile、TextFile和VideoFile充当叶子构件类。完整代码如下所示：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('import java.util.*;  \n  \n//抽象文件类：抽象构件  \nabstract class AbstractFile {  \n    public abstract void add(AbstractFile file);  \n    public abstract void remove(AbstractFile file);  \n    public abstract AbstractFile getChild(int i);  \n    public abstract void killVirus();  \n}  \n  \n//图像文件类：叶子构件  \nclass ImageFile extends AbstractFile {  \n    private String name;  \n      \n    public ImageFile(String name) {  \n        this.name = name;  \n    }  \n      \n    public void add(AbstractFile file) {  \n       System.out.println("对不起，不支持该方法！");  \n    }  \n      \n    public void remove(AbstractFile file) {  \n        System.out.println("对不起，不支持该方法！");  \n    }  \n      \n    public AbstractFile getChild(int i) {  \n        System.out.println("对不起，不支持该方法！");  \n        return null;  \n    }  \n      \n    public void killVirus() {  \n        //模拟杀毒  \n        System.out.println("----对图像文件\'" + name + "\'进行杀毒");  \n    }  \n}  \n  \n//文本文件类：叶子构件  \nclass TextFile extends AbstractFile {  \n    private String name;  \n      \n    public TextFile(String name) {  \n        this.name = name;  \n    }  \n      \n    public void add(AbstractFile file) {  \n       System.out.println("对不起，不支持该方法！");  \n    }  \n      \n    public void remove(AbstractFile file) {  \n        System.out.println("对不起，不支持该方法！");  \n    }  \n      \n    public AbstractFile getChild(int i) {  \n        System.out.println("对不起，不支持该方法！");  \n        return null;  \n    }  \n      \n    public void killVirus() {  \n        //模拟杀毒  \n        System.out.println("----对文本文件\'" + name + "\'进行杀毒");  \n    }  \n}  \n  \n//视频文件类：叶子构件  \nclass VideoFile extends AbstractFile {  \n    private String name;  \n      \n    public VideoFile(String name) {  \n        this.name = name;  \n    }  \n      \n    public void add(AbstractFile file) {  \n       System.out.println("对不起，不支持该方法！");  \n    }  \n      \n    public void remove(AbstractFile file) {  \n        System.out.println("对不起，不支持该方法！");  \n    }  \n      \n    public AbstractFile getChild(int i) {  \n        System.out.println("对不起，不支持该方法！");  \n        return null;  \n    }  \n      \n    public void killVirus() {  \n        //模拟杀毒  \n        System.out.println("----对视频文件\'" + name + "\'进行杀毒");  \n    }  \n}  \n  \n//文件夹类：容器构件  \nclass Folder extends AbstractFile {  \n    //定义集合fileList，用于存储AbstractFile类型的成员  \n    private ArrayList<AbstractFile> fileList=new ArrayList<AbstractFile>();  \n    private String name;  \n          \n    public Folder(String name) {  \n        this.name = name;  \n    }  \n      \n    public void add(AbstractFile file) {  \n       fileList.add(file);    \n    }  \n      \n    public void remove(AbstractFile file) {  \n        fileList.remove(file);  \n    }  \n      \n    public AbstractFile getChild(int i) {  \n        return (AbstractFile)fileList.get(i);  \n    }  \n      \n    public void killVirus() {  \n        System.out.println("****对文件夹\'" + name + "\'进行杀毒");  //模拟杀毒  \n          \n        //递归调用成员构件的killVirus()方法  \n        for(Object obj : fileList) {  \n            ((AbstractFile)obj).killVirus();  \n        }  \n    }  \n}  \n')])])]),t("p",[n._v("编写如下客户端测试代码：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('class Client {  \n    public static void main(String args[]) {  \n        //针对抽象构件编程  \n        AbstractFile file1,file2,file3,file4,file5,folder1,folder2,folder3,folder4;  \n          \n        folder1 = new Folder("Sunny的资料");  \n        folder2 = new Folder("图像文件");  \n        folder3 = new Folder("文本文件");  \n        folder4 = new Folder("视频文件");  \n          \n        file1 = new ImageFile("小龙女.jpg");  \n        file2 = new ImageFile("张无忌.gif");  \n        file3 = new TextFile("九阴真经.txt");  \n        file4 = new TextFile("葵花宝典.doc");  \n        file5 = new VideoFile("笑傲江湖.rmvb");  \n  \n        folder2.add(file1);  \n        folder2.add(file2);  \n        folder3.add(file3);  \n        folder3.add(file4);  \n        folder4.add(file5);  \n        folder1.add(folder2);  \n        folder1.add(folder3);  \n        folder1.add(folder4);  \n          \n        //从“Sunny的资料”节点开始进行杀毒操作  \n        folder1.killVirus();  \n    }  \n}  \n')])])]),t("p",[n._v("编译并运行程序，输出结果如下：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("****对文件夹'Sunny的资料'进行杀毒\n****对文件夹'图像文件'进行杀毒\n----对图像文件'小龙女.jpg'进行杀毒\n----对图像文件'张无忌.gif'进行杀毒\n****对文件夹'文本文件'进行杀毒\n----对文本文件'九阴真经.txt'进行杀毒\n----对文本文件'葵花宝典.doc'进行杀毒\n****对文件夹'视频文件'进行杀毒\n----对视频文件'笑傲江湖.rmvb'进行杀毒\n")])])]),t("p",[n._v("由于在本实例中使用了组合模式，在抽象构件类中声明了所有方法，包括用于管理和访问子构件的方法，如add()方法和remove()方法等，因此在ImageFile等叶子构件类中实现这些方法时必须进行相应的异常处理或错误提示。在容器构件类Folder的killVirus()方法中将递归调用其成员对象的killVirus()方法，从而实现对整个树形结构的遍历。")]),n._v(" "),t("p",[n._v("如果需要更换操作节点，例如只需对文件夹“文本文件”进行杀毒，客户端代码只需修改一行即可，将")]),n._v(" "),t("p",[n._v("代码：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("folder1.killVirus();\n")])])]),t("p",[n._v("改为：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("folder3.killVirus();\n")])])]),t("p",[n._v("输出结果如下：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("****对文件夹'文本文件'进行杀毒\n----对文本文件'九阴真经.txt'进行杀毒\n----对文本文件'葵花宝典.doc'进行杀毒\n")])])]),t("p",[n._v("在具体实现时，我们可以创建图形化界面让用户选择所需操作的根节点，无须修改源代码，符合“开闭原则”，客户端无须关心节点的层次结构，可以对所选节点进行统一处理，提高系统的灵活性。")])])}),[],!1,null,null,null);e.default=i.exports}}]);