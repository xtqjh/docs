(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{412:function(t,r,a){"use strict";a.r(r);var c=a(42),e=Object(c.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"工厂三兄弟之抽象工厂模式-三"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工厂三兄弟之抽象工厂模式-三"}},[t._v("#")]),t._v(" 工厂三兄弟之抽象工厂模式（三）")]),t._v(" "),a("p",[t._v("3 抽象工厂模式概述")]),t._v(" "),a("p",[t._v("抽象工厂模式为创建一组对象提供了一种解决方案。与工厂方法模式相比，抽象工厂模式中的具体工厂不只是创建一种产品，它负责创建一族产品。抽象工厂模式定义如下：")]),t._v(" "),a("p",[t._v("抽象工厂模式(Abstract Factory Pattern)：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，它是一种对象创建型模式。")]),t._v(" "),a("p",[t._v("在抽象工厂模式中，每一个具体工厂都提供了多个工厂方法用于产生多种不同类型的产品，这些产品构成了一个产品族，抽象工厂模式结构如图5所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.blog.csdn.net/20130713163800203?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTG92ZUxpb24=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",alt:""}})]),t._v(" "),a("p",[t._v("图5  抽象工厂模式结构图")]),t._v(" "),a("p",[t._v("在抽象工厂模式结构图中包含如下几个角色：")]),t._v(" "),a("p",[t._v("● AbstractFactory（抽象工厂）：它声明了一组用于创建一族产品的方法，每一个方法对应一种产品。")]),t._v(" "),a("p",[t._v("● ConcreteFactory（具体工厂）：它实现了在抽象工厂中声明的创建产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中。")]),t._v(" "),a("p",[t._v("● AbstractProduct（抽象产品）：它为每种产品声明接口，在抽象产品中声明了产品所具有的业务方法。")]),t._v(" "),a("p",[t._v("● ConcreteProduct（具体产品）：它定义具体工厂生产的具体产品对象，实现抽象产品接口中声明的业务方法。")]),t._v(" "),a("p",[t._v("在抽象工厂中声明了多个工厂方法，用于创建不同类型的产品，抽象工厂可以是接口，也可以是抽象类或者具体类，其典型代码如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("abstract class AbstractFactory {  \npublic abstract AbstractProductA createProductA(); //工厂方法一  \npublic abstract AbstractProductB createProductB(); //工厂方法二  \n……  \n}  \n")])])]),a("p",[t._v("具体工厂实现了抽象工厂，每一个具体的工厂方法可以返回一个特定的产品对象，而同一个具体工厂所创建的产品对象构成了一个产品族。对于每一个具体工厂类，其典型代码如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class ConcreteFactory1 extends AbstractFactory {  \n    //工厂方法一  \npublic AbstractProductA createProductA() {  \n    return new ConcreteProductA1();  \n}  \n \n//工厂方法二  \npublic AbstractProductB createProductB() {  \n    return new ConcreteProductB1();  \n}  \n  \n……  \n}  \n")])])]),a("p",[t._v("与工厂方法模式一样，抽象工厂模式也可为每一种产品提供一组重载的工厂方法，以不同的方式对产品对象进行创建。")]),t._v(" "),a("p",[t._v("思考")]),t._v(" "),a("p",[t._v("抽象工厂模式是否符合“开闭原则”？【从增加新的产品等级结构和增加新的产品族两方面进行思考。】")])])}),[],!1,null,null,null);r.default=e.exports}}]);