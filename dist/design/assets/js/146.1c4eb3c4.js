(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{492:function(t,e,_){"use strict";_.r(e);var v=_(42),n=Object(v.a)({},(function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"请求发送者与接收者解耦-命令模式-六"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#请求发送者与接收者解耦-命令模式-六"}},[t._v("#")]),t._v(" 请求发送者与接收者解耦——命令模式（六）")]),t._v(" "),_("p",[t._v("7 宏命令")]),t._v(" "),_("p",[t._v("宏命令(Macro Command)又称为组合命令，它是组合模式和命令模式联用的产物。宏命令是一个具体命令类，它拥有一个集合属性，在该集合中包含了对其他命令对象的引用。通常宏命令不直接与请求接收者交互，而是通过它的成员来调用接收者的方法。当调用宏命令的execute()方法时，将递归调用它所包含的每个成员命令的execute()方法，一个宏命令的成员可以是简单命令，还可以继续是宏命令。执行一个宏命令将触发多个具体命令的执行，从而实现对命令的批处理，其结构如图7所示：")]),t._v(" "),_("p",[_("img",{attrs:{src:"http://img.my.csdn.net/uploads/201304/15/1366041322_3439.jpg",alt:""}})]),t._v(" "),_("p",[t._v("图7  宏命令结构图")]),t._v(" "),_("p",[t._v("8 命令模式总结")]),t._v(" "),_("p",[t._v("命令模式是一种使用频率非常高的设计模式，它可以将请求发送者与接收者解耦，请求发送者通过命令对象来间接引用请求接收者，使得系统具有更好的灵活性和可扩展性。在基于GUI的软件开发，无论是在电脑桌面应用还是在移动应用中，命令模式都得到了广泛的应用。")]),t._v(" "),_("ol",[_("li",[t._v("主要优点")])]),t._v(" "),_("p",[t._v("命令模式的主要优点如下：")]),t._v(" "),_("p",[t._v("(1) 降低系统的耦合度。由于请求者与接收者之间不存在直接引用，因此请求者与接收者之间实现完全解耦，相同的请求者可以对应不同的接收者，同样，相同的接收者也可以供不同的请求者使用，两者之间具有良好的独立性。")]),t._v(" "),_("p",[t._v("(2) 新的命令可以很容易地加入到系统中。由于增加新的具体命令类不会影响到其他类，因此增加新的具体命令类很容易，无须修改原有系统源代码，甚至客户类代码，满足“开闭原则”的要求。")]),t._v(" "),_("p",[t._v("(3) 可以比较容易地设计一个命令队列或宏命令（组合命令）。")]),t._v(" "),_("p",[t._v("(4) 为请求的撤销(Undo)和恢复(Redo)操作提供了一种设计和实现方案。")]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[t._v("主要缺点")])]),t._v(" "),_("p",[t._v("命令模式的主要缺点如下：")]),t._v(" "),_("p",[t._v("使用命令模式可能会导致某些系统有过多的具体命令类。因为针对每一个对请求接收者的调用操作都需要设计一个具体命令类，因此在某些系统中可能需要提供大量的具体命令类，这将影响命令模式的使用。")]),t._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[t._v("适用场景")])]),t._v(" "),_("p",[t._v("在以下情况下可以考虑使用命令模式：")]),t._v(" "),_("p",[t._v("(1) 系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。请求调用者无须知道接收者的存在，也无须知道接收者是谁，接收者也无须关心何时被调用。")]),t._v(" "),_("p",[t._v("(2) 系统需要在不同的时间指定请求、将请求排队和执行请求。一个命令对象和请求的初始调用者可以有不同的生命期，换言之，最初的请求发出者可能已经不在了，而命令对象本身仍然是活动的，可以通过该命令对象去调用请求接收者，而无须关心请求调用者的存在性，可以通过请求日志文件等机制来具体实现。")]),t._v(" "),_("p",[t._v("(3) 系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。")]),t._v(" "),_("p",[t._v("(4) 系统需要将一组操作组合在一起形成宏命令。")]),t._v(" "),_("p",[t._v("练习")]),t._v(" "),_("blockquote",[_("p",[t._v("Sunny软件公司欲开发一个基于Windows平台的公告板系统。该系统提供了一个主菜单(Menu)，在主菜单中包含了一些菜单项(MenuItem)，可以通过Menu类的addMenuItem()方法增加菜单项。菜单项的主要方法是click()，每一个菜单项包含一个抽象命令类，具体命令类包括OpenCommand(打开命令)，CreateCommand(新建命令)，EditCommand(编辑命令)等，命令类具有一个execute()方法，用于调用公告板系统界面类(BoardScreen)的open()、create()、edit()等方法。试使用命令模式设计该系统，以便降低MenuItem类与BoardScreen类之间的耦合度。")])])])}),[],!1,null,null,null);e.default=n.exports}}]);