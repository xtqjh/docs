(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{408:function(e,n,a){"use strict";a.r(n);var t=a(42),r=Object(t.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"工厂三兄弟之工厂方法模式-三"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工厂三兄弟之工厂方法模式-三"}},[e._v("#")]),e._v(" 工厂三兄弟之工厂方法模式（三）")]),e._v(" "),a("p",[e._v("3 完整解决方案")]),e._v(" "),a("p",[e._v("Sunny公司开发人员决定使用工厂方法模式来设计日志记录器，其基本结构如图3所示：")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://img.blog.csdn.net/20130712102729562?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTG92ZUxpb24=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",alt:"日志记录器结构图"}})]),e._v(" "),a("p",[e._v("图3 日志记录器结构图")]),e._v(" "),a("p",[e._v("在图3中，Logger接口充当抽象产品，其子类FileLogger和DatabaseLogger充当具体产品，LoggerFactory接口充当抽象工厂，其子类FileLoggerFactory和DatabaseLoggerFactory充当具体工厂。完整代码如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//日志记录器接口：抽象产品  \ninterface Logger {  \n    public void writeLog();  \n}  \n  \n//数据库日志记录器：具体产品  \nclass DatabaseLogger implements Logger {  \n    public void writeLog() {  \n        System.out.println("数据库日志记录。");  \n    }  \n}  \n  \n//文件日志记录器：具体产品  \nclass FileLogger implements Logger {  \n    public void writeLog() {  \n        System.out.println("文件日志记录。");  \n    }  \n}  \n  \n//日志记录器工厂接口：抽象工厂  \ninterface LoggerFactory {  \n    public Logger createLogger();  \n}  \n  \n//数据库日志记录器工厂类：具体工厂  \nclass DatabaseLoggerFactory implements LoggerFactory {  \n    public Logger createLogger() {  \n            //连接数据库，代码省略  \n            //创建数据库日志记录器对象  \n            Logger logger = new DatabaseLogger();   \n            //初始化数据库日志记录器，代码省略  \n            return logger;  \n    }     \n}  \n  \n//文件日志记录器工厂类：具体工厂  \nclass FileLoggerFactory implements LoggerFactory {  \n    public Logger createLogger() {  \n            //创建文件日志记录器对象  \n            Logger logger = new FileLogger();   \n            //创建文件，代码省略  \n            return logger;  \n    }     \n}  \n')])])]),a("p",[e._v("编写如下客户端测试代码：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class Client {  \n    public static void main(String args[]) {  \n        LoggerFactory factory;  \n        Logger logger;  \n        factory = new FileLoggerFactory(); //可引入配置文件实现  \n        logger = factory.createLogger();  \n        logger.writeLog();  \n    }  \n}  \n")])])]),a("p",[e._v("编译并运行程序，输出结果如下：")]),e._v(" "),a("p",[e._v("文件日志记录。")]),e._v(" "),a("p",[e._v("4 反射与配置文件")]),e._v(" "),a("p",[e._v("为了让系统具有更好的灵活性和可扩展性，Sunny公司开发人员决定对日志记录器客户端代码进行重构，使得可以在不修改任何客户端代码的基础上更换或增加新的日志记录方式。")]),e._v(" "),a("p",[e._v("在客户端代码中将不再使用new关键字来创建工厂对象，而是将具体工厂类的类名存储在配置文件（如XML文件）中，通过读取配置文件获取类名字符串，再使用Java的反射机制，根据类名字符串生成对象。在整个实现过程中需要用到两个技术：Java反射机制与配置文件读取。软件系统的配置文件通常为XML文件，我们可以使用DOM (Document Object Model)、SAX (Simple API for XML)、StAX (Streaming API for XML)等技术来处理XML文件。关于DOM、SAX、StAX等技术的详细学习大家可以参考其他相关资料，在此不予扩展。")]),e._v(" "),a("p",[e._v("扩展")]),e._v(" "),a("p",[e._v("关于Java与XML的相关资料，大家可以阅读Tom Myers和Alexander Nakhimovsky所著的《Java XML编程指南》一书或访问developer Works 中国中的“Java XML 技术专题”，参考链接：\nhttp://www.ibm.com/developerworks/cn/xml/theme/x-java.html")]),e._v(" "),a("p",[e._v("Java反射(Java Reflection)是指在程序运行时获取已知名称的类或已有对象的相关信息的一种机制，包括类的方法、属性、父类等信息，还包括实例的创建和实例类型的判断等。在反射中使用最多的类是Class，Class类的实例表示正在运行的Java应用程序中的类和接口，其forName(String className)方法可以返回与带有给定字符串名的类或接口相关联的 Class对象，再通过Class对象的newInstance()方法创建此对象所表示的类的一个新实例，即通过一个类名字符串得到类的实例。如创建一个字符串类型的对象，其代码如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//通过类名生成实例对象并将其返回  \nClass c=Class.forName("String");  \nObject obj=c.newInstance();  \nreturn obj;  \n')])])]),a("p",[e._v("此外，在JDK中还提供了java.lang.reflect包，封装了其他与反射相关的类，此处只用到上述简单的反射代码，在此不予扩展。")]),e._v(" "),a("p",[e._v("Sunny公司开发人员创建了如下XML格式的配置文件config.xml用于存储具体日志记录器工厂类类名：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<!— config.xml --\x3e  \n<?xml version="1.0"?>  \n<config>  \n    <className>FileLoggerFactory</className>  \n</config>  \n')])])]),a("p",[e._v("为了读取该配置文件并通过存储在其中的类名字符串反射生成对象，Sunny公司开发人员开发了一个名为XMLUtil的工具类，其详细代码如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//工具类XMLUtil.java  \nimport javax.xml.parsers.*;  \nimport org.w3c.dom.*;  \nimport org.xml.sax.SAXException;  \nimport java.io.*;  \n  \npublic class XMLUtil {  \n//该方法用于从XML配置文件中提取具体类类名，并返回一个实例对象  \n    public static Object getBean() {  \n        try {  \n            //创建DOM文档对象  \n            DocumentBuilderFactory dFactory = DocumentBuilderFactory.newInstance();  \n            DocumentBuilder builder = dFactory.newDocumentBuilder();  \n            Document doc;                             \n            doc = builder.parse(new File("config.xml"));   \n          \n            //获取包含类名的文本节点  \n            NodeList nl = doc.getElementsByTagName("className");  \n            Node classNode=nl.item(0).getFirstChild();  \n            String cName=classNode.getNodeValue();  \n              \n            //通过类名生成实例对象并将其返回  \n            Class c=Class.forName(cName);  \n            Object obj=c.newInstance();  \n            return obj;  \n        }     \n        catch(Exception e) {  \n            e.printStackTrace();  \n            return null;  \n         }  \n    }  \n}  \n')])])]),a("p",[e._v("有了XMLUtil类后，可以对日志记录器的客户端代码进行修改，不再直接使用new关键字来创建具体的工厂类，而是将具体工厂类的类名存储在XML文件中，再通过XMLUtil类的静态工厂方法getBean()方法进行对象的实例化，代码修改如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class Client {  \n    public static void main(String args[]) {  \n        LoggerFactory factory;  \n        Logger logger;  \n        factory = (LoggerFactory)XMLUtil.getBean(); //getBean()的返回类型为Object，需要进行强制类型转换  \n        logger = factory.createLogger();  \n        logger.writeLog();  \n    }  \n}  \n")])])]),a("p",[e._v("引入XMLUtil类和XML配置文件后，如果要增加新的日志记录方式，只需要执行如下几个步骤：")]),e._v(" "),a("p",[e._v("(1) 新的日志记录器需要继承抽象日志记录器Logger；")]),e._v(" "),a("p",[e._v("(2) 对应增加一个新的具体日志记录器工厂，继承抽象日志记录器工厂LoggerFactory，并实现其中的工厂方法createLogger()，设置好初始化参数和环境变量，返回具体日志记录器对象；")]),e._v(" "),a("p",[e._v("(3) 修改配置文件config.xml，将新增的具体日志记录器工厂类的类名字符串替换原有工厂类类名字符串；")]),e._v(" "),a("p",[e._v("(4) 编译新增的具体日志记录器类和具体日志记录器工厂类，运行客户端测试类即可使用新的日志记录方式，而原有类库代码无须做任何修改，完全符合“开闭原则”。")]),e._v(" "),a("p",[e._v("通过上述重构可以使得系统更加灵活，由于很多设计模式都关注系统的可扩展性和灵活性，因此都定义了抽象层，在抽象层中声明业务方法，而将业务方法的实现放在实现层中。\n疑问\n思考")]),e._v(" "),a("p",[e._v("有人说：可以在客户端代码中直接通过反射机制来生成产品对象，在定义产品对象时使用抽象类型，同样可以确保系统的灵活性和可扩展性，增加新的具体产品类无须修改源代码，只需要将其作为抽象产品类的子类再修改配置文件即可，根本不需要抽象工厂类和具体工厂类。")]),e._v(" "),a("p",[e._v("试思考这种做法的可行性？如果可行，这种做法是否存在问题？为什么？")])])}),[],!1,null,null,null);n.default=r.exports}}]);